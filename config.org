#+TITLE: Config
Place your private configuration here! Remember, you do not need to run `doom
sync` after modifying this file!


Reference variables which are unique to a given computer (thus the separate file)
#+INCLUDE: localLocations.org
* Overview
Here are some additional functions/macros that could help you configure Doom:
 - `load!' for loading external *.el files relative to this one
 - `use-package!' for configuring packages
 - `after!' for running code after a package has loaded
 - `add-load-path!' for adding directories to the `load-path', relative to
   this file. Emacs searches the `load-path' when you load packages with
   `require' or `use-package'.
 - `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
* fonts and theme 
Doom exposes five (optional) variables for controlling fonts in Doom. Here are
the three important ones:
  + `doom-font'
  + `doom-variable-pitch-font'
  + `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations
    or streaming.


They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font
string. You generally only need these two:
#+begin_src elisp
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
       doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+END_SRC

There are two ways to load a theme. Both assume the theme is installed and
 available. You can either set `doom-theme' or manually load a theme with the
 `load-theme' function. This is the default:
#+begin_src elisp 
(setq doom-theme 'doom-one)
#+END_SRC



This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src elisp 
(setq display-line-numbers-type `relative)
#+END_SRC

** Things to figure out
- git timemachine in eevil
- yasnippets
-

* Useful variables
doom folder location
#+begin_src elisp 
(setq own-doom-home "/home/dsweber/.doom.d/")
#+end_src
* Base Settings and new functions
handling reloading magit-status buffers
#+begin_src emacs-lisp 
(after! persp-mode
  (persp-def-buffer-save/load
   :mode 'magit-status-mode :tag-symbol 'def-magit-status-buffer
   :save-vars '(default-directory)
   :load-function #'(lambda (savelist &rest _)
                      (cl-destructuring-bind (buffer-name vars-list &rest _rest) (cdr savelist)
                        (let ((buf-dir (alist-get 'default-directory vars-list)))
                          (magit-status buf-dir))))))
#+end_src
camelCaseIsHowIRollInCode
#+begin_src elisp
(add-hook 'prog-mode-hook 'subword-mode)
#+END_SRC

input via tex allows for easy unicode
#+begin_src elisp
(setq default-input-method "TeX")
#+END_SRC

I don't like lockfiles, as they just create clutter
#+begin_src elisp
(setq create-lockfiles nil)
#+END_SRC

electric pairs are better
#+begin_src elisp
(setq electric-pair-mode t)
#+end_src

auto-fill mode (hard wrapping is +nice+ not nice methinks)
#+begin_src elisp :tangle no
(setq-default auto-fill-function nil)
#+end_src

word wrap should be on everywhere
#+begin_src elisp
(after! +word-wrap
  (setq +gobal-word-wrap-mode +1))
#+end_src
** New functions
#+begin_src elisp 
(defun add-electric-pairs (new-pairs)
  (setq-local electric-pair-pairs (append electric-pair-pairs new-pairs)))
#+END_SRC
** Mark/unmark matching (currently off)
#+begin_src elisp 
(global-set-key (kbd "M-n") 'mc/mark-next-like-this)
(global-set-key (kbd "M-N") 'mc/unmark-next-like-this)
(global-set-key (kbd "M-p") 'mc/mark-previous-like-this)
(global-set-key (kbd "M-P") 'mc/unmark-previous-like-this)
(global-set-key (kbd "C-c n") 'mc/mark-all-like-this)
(global-set-key (kbd "C-M-]") 'mc/mark-sgml-tag-pair)
#+END_SRC

* Ace stuff
So the default switch windows binding is too deep for my taste, so I'm switching
it with the meta key of facemenu
#+begin_src elisp 
(after! ace-window
  (global-set-key (kbd "M-o") 'ace-window)
  ;;(global-set-key (kbd "C-x o") 'facemenu-menu)
  (setq aw-dispatch-always 3)
  (setq aw-kes '(?a ?s ?d ?f ?g ?h ?j ?k ?l ?: ?'))
  (setq aw-scome 'frame)
  (setq aw-make-frame-char ?n)
  (setq aw-dispatch-alist
        '((?x aw-delete-window "Delete Window")
          (?m aw-move-window "Swap Windows")
          (?c aw-copy-window "Move Window")
          (?b aw-switch-buffer-in-window "Select Buffer")
          (?p aw-flip-window "Flip Window")
          (?o aw-switch-buffer-other-window "Switch Buffer in another window")
          (?r aw-split-window-fair "Split fair window")
          (?z aw-split-window-vert "Split Vertical Window")
          (?v aw-split-window-horz "Split Window horizontally")
          (?? aw-show-dispatch-help)
          ))
  )
#+End_src
* Modifying doom installed packages
** company stuff:
#+begin_src elisp 
(after! company-dict
  (setq company-dict-dir (concat user-emacs-directory "dict/"))
  (setq backends-for-everywhere '(company-bibtex company-ispell))
  (setq company-backends (append company-backends backends-for-everywhere)))
#+END_SRC
**  Auctex
#+begin_src elisp 
(after! tex
  (setq-default TeX-master 'dwim)
  (setq TeX-master 'dwim)
  (setq TeX-save-query nil)
  (setq Tex-PDF-mode t)
  (setq reftex-default-bibliography "~/allHail/LaTeX/oneBibToRuleThemAll.bib")
)
#+END_SRC

** aspell dictionary spell whatever you want to call it:
#+begin_src elisp 
(after! spell-fu
  (setq ispell-dictionary "en-custom")
  (setq ispell-personal-dictionary (concat own-doom-home "personal.txt"))
  )
#+end_src

** Projectile
#+begin_src emacs-lisp 
(after! projectile
   :config
   (setq custom-suffixes '(".pdf" ".png" ".svg"))
   (setq projectile-globally-ignored-file-suffixes (append projectile-globally-ignored-file-suffixes custom-suffixes)))
#+end_src

** counsel/ivy
#+begin_src emacs-lisp 
(after! counsel
  (setq counsel-rg-base-command '("rg" "--max-columns" "900" "--with-filename" "--no-heading" "--line-number" "--color" "never" "%s")))
#+end_src

** Rainbow Mode
#+begin_src elisp
(use-package! rainbow-mode
  :ensure t)
#+end_src

** Indent
somehow the default indent got set to 8?
#+begin_src elisp
  (after! indent
          (setq standard-indent 4))
#+end_src

#+end_src
* Org settings
org ref is excellent.

#+BEGIN_SRC elisp 
(use-package! org-ref
  :config
  (setq orgRefDir "~/allHail/LaTeX/")
  (setq reftex-default-bibliography (concat orgRefDir "oneBibToRuleThemAll.bib")
        org-ref-default-bibliography (concat orgRefDir "oneBibToRuleThemAll.bib")
        org-ref-bibliography-notes (concat orgRefDir "oneBibToRuleThemAll.org")
        bibtex-completion-bibliography (concat orgRefDir "oneBibToRuleThemAll.bib")
        bibtex-completion-library-path "~/allHail/zoteroFiles"
        bibtex-completion-notes-path (concat orgRefDir "oneBibToRuleThemAll.org"))
  )
(map! :leader
      :desc "insert a helm reference"
      "i c" 'org-ref-insert-link)
#+END_SRC

I would like company do to things in org-mode yes please thankyou
#+begin_src elisp 
(after! org
  :config
  (setq org-startup-with-latex-preview t)
  (setq org-startup-with-inline-images t)
  (defun native-comp-available-p () nil)
  ;;(setq org)
  )
#+END_SRC

whenever you're over a latex fragment, it will compile. Also, get the resolution correct
#+begin_src elisp 
(use-package! org-fragtog
  :config
  (add-hook 'org-mode-hook 'org-fragtog-mode)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
  )
#+end_src

** Org-anizing my life
Current references for putting this together are [[http://doc.norang.ca/org-mode.html][norang]] and [[http://www.cachestocaches.com/2016/9/my-workflow-org-agenda/][Caches to Caches]].
Enable my todos from these files to be collected by the agenda
#+begin_src elisp 
  (after! org
      (setq org-agenda-files (quote ("~/orgNotes")))
      (setq org-directory "~/orgNotes")
      (setq org-priority-faces  '((?A :foreground "#FF6C6B")
                              (?B :foreground "#F97066")
                              (?C :foreground "#F37460")
                              (?D :foreground "#ED785A")
                              (?E :foreground "#E77D54")
                              (?F :foreground "#E1804F")
                              (?G :foreground "#DB8449")
                              (?H :foreground "#D8835B")
                              (?I :foreground "#D48172")
                              (?J :foreground "#D17F8A")
                              (?K :foreground "#CE7DA2")
                              (?L :foreground "#CA7BBA")
                              (?M :foreground "#C779D2")
                              (?N :foreground "#C47BDE")
                              (?O :foreground "#BF82DE")
                              (?P :foreground "#BB88DE")
                              (?Q :foreground "#B68FDF")
                              (?R :foreground "#B196DF")
                              (?S :foreground "#AD9CE1")
                              (?T :foreground "#A69EDD")
                              (?U :foreground "#9A94C9")
                              (?V :foreground "#8D8BB6")
                              (?W :foreground "#8181A3")
                              (?X :foreground "#74768F")
                              (?Y :foreground "#676C7B")
                              (?Z :foreground "#5B6268")))
      )
#+end_src
Doom has a thing where it's possible to file captures =SPC-X= to project specific files all centralized in the [[~/org]] folder. Then the display name can be customized with
:Properties:
:CATEGORY: Emacs
:END:

The list of keywords could use more processing; timestamp's in wait would be useful, though this doesn't seem to be working. should check back after restarting.
#+begin_src elisp 
(setq org-todo-keywords (quote ((sequence "TODO(t@/!)" "PROJ(p)" "STRT(s!/!)" "WAIT(w@/!)" "HOLD(h)" "|" "DONE(d)" "KILL(k)")
                                (sequence "[ ](T@/!)" "[-](S)" "[?](W)" "|" "[X](D)"))))

(setq org-todo-keywords-for-agenda (quote ((sequence "TODO(t@/!)" "PROJ(p)" "STRT(s!/!)" "WAIT(w@/!)" "HOLD(h)" "|" "DONE(d)" "KILL(k)")
                                (sequence "[ ](T@/!)" "[-](S)" "[?](W)" "|" "[X](D)"))))
#+end_src

#+begin_src elisp 
(setq org-agenda-todo-ignore-deadlines 'near)
(setq org-agenda-todo-ignore-scheduled 'future)
#+end_src


A review agenda mode (currently non-functional, as it isn't capturing any DONE tasks)
#+begin_src elisp :tangle no
(after! org
  (add-to-list 'org-agenda-custom-commands
               '("W" "Weekly review"
                 agenda ""
                 ((org-agenda-start-day "-7d")
                  (org-agenda-span 14)
                  (org-agenda-start-on-weekday 1)
                  (org-agenda-start-with-log-mode '(closed))
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp "^\\*\\* DONE "))))))
#+end_src


org priorities
#+begin_src elisp 
(after! org
  :config
  (setq org-priority-highest ?A)
  (setq org-priority-lowest ?Z)
  (setq org-priority-default ?M))
#+end_src

#+begin_src elisp 
(after! org
  :config
  (setq org-agenda-sorting-strategy
        '((agenda habit-up deadline-up priority-down time-up scheduled-down)
          (todo category-keep priority-down)
          (tags priority-down category-keep)
          (search category-keep)))
  )
#+end_src

The keybindings for the agenda changed. some have added an annoying amount of friction.
#+begin_src elisp
  (after! org
    (org-defkey org-agenda-mode-map "j" #'org-agenda-next-line)
    (org-defkey org-agenda-mode-map "k" #'org-agenda-previous-line)
    (org-defkey org-agenda-mode-map "J" #'org-agenda-priority-up)
    (org-defkey org-agenda-mode-map "K" #'org-agenda-priority-down)
    (org-defkey org-agenda-mode-map (kbd "SPC") 'nil)
    )
#+end_src
* Julia Settings
First, let's define the current version of Julia
#+begin_src elisp 
(after! julia-repl
  (setq juliaVersion "1.6.3"))
#+END_SRC


I've mostly borrowed this from https://www.gtrun.org/post/config/#julia.
Apparently non-Jedi has been making an emacs interface for the lsp [[https://github.com/non-Jedi/lsp-julia.git][here.]] Also,
this julia code doesn't actually need to be tangled, but should be run
beforehand.
#+BEGIN_SRC julia :tangle no
juliaVersion = "1.6.3"
using Pkg, PackageCompiler
Pkg.activate("~/.julia/environments/newBase")
Pkg.add("LanguageServer")
create_sysimage(:LanguageServer,
                sysimage_path = "/home/dsweber/julia-$(juliaVersion)/lib/LspSysImage.so")
#+END_SRC

and now the actual code to be tangled into ~init.el~.
#+begin_src elisp 
  (use-package! lsp-julia
    :after julia-repl eshell lsp
    :config
    (setenv "PATH"
            (concat
             "/home/dsweber/julia-" juliaVersion "/bin" ":"
             (getenv "PATH")))
    (add-hook 'julia-mode-hook 'lsp)
    (add-hook 'ess-julia-mode-hook #'lsp)
    (setq lsp-julia-default-environment "~/.julia/environments/v1.6")
    (setq lsp-julia-package-dir "~/.julia/environments/v1.6")
    (setq lsp-julia-command (concat
             "/home/dsweber/julia-" juliaVersion "/bin/julia"
             ))
    (setq lsp-julia-flags '("--project=/home/dsweber/.julia/environments/v1.6" "--startup-file=no" "--history-file=no"))
    (setq lsp-julia-timeout 12000)
    (setq lsp-enable-folding t)
    (setq julia-indent-offset 4)

    (setq lsp-julia-format-indents true)
    (setq lsp-enable-indentation true)
    (setq julia-indent-mapping '((julia-mode . julia-indent-offset)))
    (setq lsp--formatting-indent-alist '((c-mode                     . c-basic-offset)                   ; C
    (c++-mode                   . c-basic-offset)                   ; C++
    (csharp-mode                . c-basic-offset)                   ; C#
    (csharp-tree-sitter-mode    . csharp-tree-sitter-indent-offset) ; C#
    (d-mode                     . c-basic-offset)                   ; D
    (java-mode                  . c-basic-offset)                   ; Java
    (jde-mode                   . c-basic-offset)                   ; Java (JDE)
    (js-mode                    . js-indent-level)                  ; JavaScript
    (js2-mode                   . js2-basic-offset)                 ; JavaScript-IDE
    (js3-mode                   . js3-indent-level)                 ; JavaScript-IDE
    (json-mode                  . js-indent-level)                  ; JSON
    (lua-mode                   . lua-indent-level)                 ; Lua
    (objc-mode                  . c-basic-offset)                   ; Objective C
    (php-mode                   . c-basic-offset)                   ; PHP
    (perl-mode                  . perl-indent-level)                ; Perl
    (cperl-mode                 . cperl-indent-level)               ; Perl
    (raku-mode                  . raku-indent-offset)               ; Perl6/Raku
    (erlang-mode                . erlang-indent-level)              ; Erlang
    (ada-mode                   . ada-indent)                       ; Ada
    (sgml-mode                  . sgml-basic-offset)                ; SGML
    (nxml-mode                  . nxml-child-indent)                ; XML
    (pascal-mode                . pascal-indent-level)              ; Pascal
    (typescript-mode            . typescript-indent-level)          ; Typescript
    (sh-mode                    . sh-basic-offset)                  ; Shell Script
    (ruby-mode                  . ruby-indent-level)                ; Ruby
    (enh-ruby-mode              . enh-ruby-indent-level)            ; Ruby
    (crystal-mode               . crystal-indent-level)             ; Crystal (Ruby)
    (css-mode                   . css-indent-offset)                ; CSS
    (rust-mode                  . rust-indent-offset)               ; Rust
    (rustic-mode                . rustic-indent-offset)             ; Rust
    (scala-mode                 . scala-indent:step)                ; Scala
    (powershell-mode            . powershell-indent)                ; PowerShell
    (ess-mode                   . ess-indent-offset)                ; ESS (R)
    (yaml-mode                  . yaml-indent-offset)               ; YAML
    (hack-mode                  . hack-indent-offset)               ; Hack
    (julia-mode                 . julia-indent-offset)
    (default                    . standard-indent)))
    )
#+END_SRC

It appears that julia-repl also has some settings to adjust
#+begin_src elisp 
(after! julia-repl
  (setq julia-repl-executable-records
        `((default ,(concat "/home/dsweber/julia-" juliaVersion
                            "/bin/julia") :basedir
                            nil)
          )
        )
  :hook '(julia-repl-mode-hook +word-wrap-mode)
  )
#+end_src
* Evil Settings

because I have some odd preferences about how top middle bottom should work
#+begin_src elisp 
(after! evil
  (define-key evil-normal-state-map "M" 'evil-scroll-line-to-center)
  (define-key evil-normal-state-map "L" 'evil-scroll-line-to-bottom)
  (define-key evil-normal-state-map "H" 'evil-scroll-line-to-top)
  (define-key evil-normal-state-map "zM" 'evil-window-middle)
  (define-key evil-normal-state-map "zL" 'evil-window-bottom)
  (define-key evil-normal-state-map "zH" 'evil-window-top)
  (define-key evil-normal-state-map "zl" 'evil-scroll-left)
  (define-key evil-normal-state-map "zH" 'evil-scroll-right)
  (define-key evil-normal-state-map "zH" 'evil-window-top)
  (setq evil-cross-lines t) ;; fF etc go beyond the current line
  (setq evil-want-Y-yank-to-eol 'nil)
  )
#+END_SRC

quickscope highlights what letters are unique for the purpose of jumping.
#+begin_src elisp 
(use-package! evil-quickscope
  :config
  (global-evil-quickscope-mode 1)
  (add-hook 'org-agenda-mode-hook 'turn-off-evil-quickscope-mode)
  (setq evil-quickscope-cross-lines t)
  )
#+end_src

fringe marks are more legible
#+begin_src elisp 
(use-package! evil-fringe-mark
  :config
  (global-evil-fringe-mark-mode))
#+end_src

evil numbers increments and decrements numbers. useful for adding numbers
(repeat the command e.g. 45 times)
#+begin_src elisp 
(after! evil-numbers
  (define-key evil-normal-state-map (kbd "zq") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "zq") 'evil-numbers/inc-at-pt)
  )
#+end_src
* Elfeed settings

The actual feed list and general settings are over at elfeedSources
#+begin_src elisp 
(setq rmh-elfeed-org-files (list (concat own-doom-home "elfeedSources.org")))
#+end_src

The elfeed goodies collection. See customize for more values
Elfeed Goodies Wide Threshold
#+begin_src elisp 
(use-package! elfeed-goodies
  :after elfeed-score
  :config
  (setq elfeed-goodies/entry-pane-position :bottom)
  (setq elfeed-goodies/entry-pane-position :bottom)
  (elfeed-goodies/setup)
  )
#+end_src
Display the date
#+begin_src elisp 
(after! elfeed
  (defun elfeed-search-format-date (date)
    (format-time-string "%Y-%m-%d %H:%M" (seconds-to-time date))))
#+end_src

** Elscore settings
#+begin_src elisp 
(use-package! elfeed-score
  :config
  (setq elfeed-score/score-file (concat own-doom-home "elfeed.score"))
  (define-key elfeed-search-mode-map (kbd "i") elfeed-score-map)
  (setq elfeed-search-print-entry-function 'elfeed-score-print-entry)
  (elfeed-score-enable t)
  ;; we'll make our own scoring function-- with blackjack and hookers!
  (defcustom elfeed-equalize-random-rate (/ (+ (log 3) (/ (log 11) 2)) 100.0)
    "the coefficient for converting scores to softmax eval. Default maps 100 to a
        correct sorting probability of 99%)"
    :group 'elfeed-equalize)
  (defcustom elfeed-equalize-date-to-score 6048
    "how many seconds correspond to a single score point. Default is 6048 so that
         a week difference gives a score of 100"
    :group 'elfeed-equalize)
  (defcustom elfeed-equalize-random-rate (/ (+ (log 3) (/ (log 11) 2)) 100.0)
    "the coefficient for converting scores to softmax eval. Default maps 100 to a
        correct sorting probability of 99%)"
    :group 'elfeed-equalize)

  (defun softmax (x)
    (let ((term (exp (* 2 x))))
      (/ term (+ term 1)))
    )
  (defun rand ()
    (/ (float (random most-positive-fixnum)) most-positive-fixnum))
  (defun elfeed-score/softmax-sort (a b)
    (let ((flip-prob (softmax (* elfeed-equalize-random-rate (- a b))))
          (rolled-val (rand)))
      (> flip-prob rolled-val)))
  (defun elfeed-score/date-score (sec)
    "convert a number of seconds into a score using rate c"
    (/ sec elfeed-equalize-date-to-score))
  (defun elfeed-score-softmax-swap (a b)
    "Return non-nil if A should sort before B. This is a probabilistic
    comparison that uses the date and the score"

    (let* ((a-score (elfeed-score--get-score-from-entry a))
           (b-score (elfeed-score--get-score-from-entry b))
           (a-date  (elfeed-entry-date a))
           (b-date  (elfeed-entry-date b)))
      (elfeed-score/softmax-sort a-score b-score)
      ))
  (setq elfeed-search-sort-function #'elfeed-score-softmax-swap)
  )
(setq a-date 3425)
(setq b-date 3295)
#+end_src
** +Teeny Tiny Rss+ Newsblur
getting another server to handle fetching data from other servers and phone access.
#+begin_src emacs-lisp
(setq elfeed-log-level 'debug)
(toggle-debug-on-error)
(setq elfeed-protocol-log-trace t)
(use-package! elfeed-protocol
  :config
  (setq elfeed-use-curl t)
  (elfeed-set-timeout 36000)
  (setq elfeed-protocol-newsblur-maxpages 20)
  (setq elfeed-curl-extra-arguments '("--cookie-jar" "/home/dsweber/tmp/newsblur-cookie"
                                      "--cookie" "/home/dsweber/tmp/newsblur-cookie"))
  (setq elfeed-protocol-tags elfeed-feeds)
  (setq elfeed-feeds '(( "newsblur+https://HerCarverBidesDew@newsblur.com"
                              :password-file "~/.newsblur"
                              :autotags elfeed-protocol-tags)))
  (defadvice elfeed (after configure-elfeed-feeds activate)
    "Make elfeed-org autotags rules works with elfeed-protocol."
    (setq elfeed-protocol-tags elfeed-feeds)
    (setq elfeed-feeds (list
                        (list "newsblur+https://HerCarverBidesDew@newsblur.com"
                              :password-file "~/.newsblur"
                              :autotags elfeed-protocol-tags))))
  (elfeed-protocol-enable)
  )
#+end_src
** keybindings
(defun actuator-elfeed-show-all ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-all"))
(defun actuator-elfeed-show-unread ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-unread"))

function to toggle warning level
#+begin_src elisp 
(defun elfeed-score/toggle-debug-warn-level ()
  (if (eq elfeed-score-log-level 'debug)
      (setq elfeed-score-log-level 'warn)
    (setq elfeed-score-log-level 'debug)))
#+end_src

general keybindings
#+begin_src elisp 
  (map! :leader
        (:prefix ("e" . "elfeed")
         :desc "elfeed-score-map" "m" #'elfeed-score-map
         :desc "open feed"        "f" #'elfeed
         :desc "update elfeed"    "u" #'elfeed-update
         :desc "score entries"    "s" #'elfeed-score/score
         :desc "add score rules"  "r" #'elfeed-score-load-score-file
         :desc "toggle debug"     "d" #'elfeed-score/toggle-debug-warn-level
         )
        )
#+end_src


combine the elfeed-score-print-entry and elfeed-goodies
