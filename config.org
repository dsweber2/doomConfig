#+TITLE: Config
#+CATEGORY: emacs
Place your private configuration here! Remember, you do not need to run `doom
sync` after modifying this file!
#begin_src elisp :tangle yes
(setq debug-on-error t)
#end_src

Reference variables which are unique to a given computer (thus the separate file)
#+INCLUDE: localLocations.org
* TO be debugged
#+begin_quote
Warning (initialization): An error occurred while loading ‘/home/dsweber/.emacs.d/.local/etc/@/init.28.elc’:

Error in a Doom module: /home/dsweber/.emacs.d/modules/term/eshell/config.el, (wrong-type-argument sequencep 771)

To ensure normal operation, you should investigate and remove the
cause of the error in your initialization file.  Start Emacs with
the ‘--debug-init’ option to view a complete error backtrace. Disable showing Disable logging
#+end_quote

* Overview
Here are some additional functions/macros that could help you configure Doom:
- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
this file. Emacs searches the `load-path' when you load packages with
`require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
* fonts and theme
Doom exposes five (optional) variables for controlling fonts in Doom. Here are
the three important ones:
+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations
or streaming.


They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font
string. You generally only need these two:
#+begin_src elisp :tangle no
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+END_SRC

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:
#+begin_src elisp :tangle yes
(setq doom-theme 'doom-dracula)
#+END_SRC



This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src elisp :tangle yes
(setq display-line-numbers-type `relative)
#+END_SRC

** Things to figure out
- git timemachine in eevil
- yasnippets
-

* Useful variables
doom folder location
#+begin_src elisp :tangle yes
(setq own-doom-home "/home/dsweber/.doom.d/")
#+end_src
* Base Settings and new functions
handling reloading magit-status buffers
#+begin_src emacs-lisp :tangle yes
(after! persp-mode
  (persp-def-buffer-save/load
   :mode 'magit-status-mode :tag-symbol 'def-magit-status-buffer
   :save-vars '(default-directory)
   :load-function #'(lambda (savelist &rest _)
                      (cl-destructuring-bind (buffer-name vars-list &rest _rest) (cdr savelist)
                        (let ((buf-dir (alist-get 'default-directory vars-list)))
                          (magit-status buf-dir))))))
#+end_src
camelCaseIsHowIRollInCode
#+begin_src elisp :tangle yes
(add-hook 'prog-mode-hook 'subword-mode)
#+END_SRC

input via tex allows for easy unicode
#+begin_src elisp :tangle yes
(setq default-input-method "TeX")
#+END_SRC

I don't like lockfiles, as they just create clutter
#+begin_src elisp :tangle yes
(setq create-lockfiles nil)
#+END_SRC

electric pairs are better
#+begin_src elisp :tangle yes
(setq electric-pair-mode t)
#+end_src

auto-fill mode (hard wrapping is +nice+ not nice methinks)
#+begin_src elisp :tangle no
(setq-default auto-fill-function nil)
(+global-word-wrap-mode 't)
#+end_src
strangely enough, the fill value is still used by jupyter, so setting it to ~264, based on my current screen
#+begin_src elisp :tangle yes
(after! emacs
  (setq fill-column 264))
#+end_src

#+begin_src elisp :tangle yes
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (js . t)
   (ruby . t)
   (C . t)
   (shell . t)
   (mathematica . t)
   (clojure . t)
   (R . t)
   (jupyter . t)
   ;; other languages..
   ))
(setq org-babel-load-langages '())
#+end_src

word wrap should be on everywhere
#+begin_src elisp :tangle yes
(after! +word-wrap
  (setq +gobal-word-wrap-mode 't))
#+end_src

add poly markdown mode for R-markdown files
#+begin_src elisp :tangle yes
(after! poly-markdown
  (add-to-list 'auto-mode-alist '("\\.Rmd\\'" . poly-markdown+r-mode)))
#+end_src

** Dir-locals shenanigans
Safe variables (this is for R linting)
#+begin_src elisp :tangle yes
(add-to-list 'safe-local-variable-values '(commend-add . 0))
(add-to-list 'safe-local-variable-values '(foob . integerp))
(add-to-list 'safe-local-variable-values '(+org-capture-projects-file . stringp))
+org-capture-projects-file
#+end_src


the idea here is to reload dir-locals whenever the file changes. the first and second commands work fine, the hook is a bit shaky
#+begin_src elisp :tangle yes
(defun my-reload-dir-locals-for-current-buffer ()
  "reload dir locals for the current buffer"
  (interactive)
  (let ((enable-local-variables :all))
    (hack-dir-local-variables-non-file-buffer)))
(defun my-reload-dir-locals-for-all-buffer-in-this-directory ()
  "For every buffer with the same `default-directory` as the 
current buffer's, reload dir-locals."
  (interactive)
  (let ((dir default-directory))
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer
        (when (equal default-directory dir)
          (my-reload-dir-locals-for-current-buffer))))))
(add-hook 'emacs-lisp-mode-hook
          (defun enable-autoreload-for-dir-locals ()
            (when (and (buffer-file-name)
                       (equal dir-locals-file
                              (file-name-nondirectory (buffer-file-name))))
              (add-hook 'after-save-hook
                        'my-reload-dir-locals-for-all-buffer-in-this-directory
                        nil t))))
#+end_src

** New functions
#+begin_src elisp :tangle yes
(defun add-electric-pairs (new-pairs)
  (setq-local electric-pair-pairs (append electric-pair-pairs new-pairs)))
#+END_SRC
** Mark/unmark matching (currently off)
#+begin_src elisp :tangle yes
(global-set-key (kbd "M-n") 'mc/mark-next-like-this)
(global-set-key (kbd "M-N") 'mc/unmark-next-like-this)
(global-set-key (kbd "M-p") 'mc/mark-previous-like-this)
(global-set-key (kbd "M-P") 'mc/unmark-previous-like-this)
(global-set-key (kbd "C-c n") 'mc/mark-all-like-this)
(global-set-key (kbd "C-M-]") 'mc/mark-sgml-tag-pair)
#+END_SRC
** sqlite undefined?
[[https://emacs.stackexchange.com/questions/75541/no-emacsql-sqlite-binary-available-while-running-org-roam-on-guix][from here]]
#+begin_src emacs-lisp :tangle yes
(setq emacsql-sqlite-executable "/fasterHome/anaconda3/bin/sqlite3")
#+end_src
** Snipe settings
since there's already one line stuff, going to the
#+begin_src elisp :tangle yes
(after! evil-snipe
  (setq evil-snipe-scope 'visible)
  (evil-define-key 'visual evil-snipe-local-mode-map "Z" 'evil-snipe-S)
  (evil-define-key 'visual evil-snipe-local-mode-map "z" 'evil-snipe-s)
  )

#+end_src
* Ace stuff
So the default switch windows binding is too deep for my taste, so I'm switching
it with the meta key of facemenu
#+begin_src elisp :tangle yes
(use-package! ace-window
  :config
 (global-unset-key (kbd "M-o"))
  (global-set-key (kbd "M-o") 'ace-window)
  ;;(global-set-key (kbd "C-x o") 'facemenu-menu)
  (setq aw-dispatch-always 3)
  (setq aw-kes '(?a ?s ?d ?f ?g ?h ?j ?k ?l ?: ?'))
  (setq aw-scome 'frame)
  (setq aw-make-frame-char ?n)
  (setq aw-dispatch-alist
        '((?x aw-delete-window "Delete Window")
          (?m aw-move-window "Swap Windows")
          (?c aw-copy-window "Move Window")
          (?b aw-switch-buffer-in-window "Select Buffer")
          (?p aw-flip-window "Flip Window")
          (?o aw-switch-buffer-other-window "Switch Buffer in another window")
          (?r aw-split-window-fair "Split fair window")
          (?z aw-split-window-vert "Split Vertical Window")
          (?v aw-split-window-horz "Split Window horizontally")
          (?? aw-show-dispatch-help)
          ))
  )
#+End_src
** TODO [#A] confirm this actually fixed the problem
* Modifying doom installed packages
** company stuff:
#+begin_src elisp :tangle yes
(after! company-dict
  (setq company-dict-dir (concat user-emacs-directory "dict/"))
  (setq backends-for-everywhere '(company-bibtex company-ispell))
  (setq company-backends (append company-backends backends-for-everywhere)))
#+END_SRC
** Auctex
#+begin_src elisp :tangle yes
(after! tex
  (setq-default TeX-master 'dwim)
  (setq TeX-master 'dwim)
  (setq TeX-save-query nil)
  (setq Tex-PDF-mode t)
  (setq reftex-default-bibliography "~/allHail/LaTeX/oneBibToRuleThemAll.bib")
  )
#+END_SRC

** aspell dictionary spell whatever you want to call it:
#+begin_src elisp :tangle yes
(after! spell-fu
  (setq ispell-dictionary "en-custom")
  (setq ispell-personal-dictionary (concat own-doom-home "personal.txt"))
  )
#+end_src

** Projectile
#+begin_src emacs-lisp :tangle yes
(after! projectile
  :config
  (setq custom-suffixes '(".pdf" ".png" ".svg" ".Rd"))
  (setq projectile-globally-ignored-file-suffixes (append projectile-globally-ignored-file-suffixes custom-suffixes)))
#+end_src

** counsel/ivy
#+begin_src emacs-lisp :tangle yes
(after! counsel
  (setq counsel-rg-base-command '("rg" "--max-columns" "900" "--with-filename" "--no-heading" "--line-number" "--color" "never" "%s")))
#+end_src

*** TODO hydra-ivy warning fix
■  Warning (initialization): An error occurred while loading ‘/home/dsweber/.emacs.d/.local/etc/@/init.29.elc’:

Error in a Doom module: /home/dsweber/.emacs.d/modules/completion/ivy/config.el, (error Eager macro-expansion failure: (void-variable hydra-ivy/params))

To ensure normal operation, you should investigate and remove the
cause of the error in your initialization file.  Start Emacs with
the ‘--debug-init’ option to view a complete error backtrace.
** Rainbow Mode
#+begin_src elisp :tangle yes
(use-package! rainbow-mode
  :config
  (rainbow-mode)
)
#+end_src

** Indent
somehow the default indent got set to 8?
#+begin_src elisp :tangle yes
(after! indent
  (setq standard-indent 4))
#+end_src
** flycheck
#+begin_src elisp :tangle yes
(after! flycheck
  (setq flycheck-checker-error-threshold 'nil))
#+end_src
flycheck-checker-error-threshold
* Org settings
org ref is excellent.

#+begin_src elisp :tangle yes
(use-package! org-ref
  :config
  (setq orgRefDir "~/allHail/LaTeX/")
  (setq reftex-default-bibliography (concat orgRefDir "oneBibToRuleThemAll.bib")
        org-ref-default-bibliography (concat orgRefDir "oneBibToRuleThemAll.bib")
        org-ref-bibliography-notes (concat orgRefDir "oneBibToRuleThemAll.org")
        bibtex-completion-bibliography (concat orgRefDir "oneBibToRuleThemAll.bib")
        bibtex-completion-library-path "~/allHail/zoteroFiles"
        bibtex-completion-notes-path (concat orgRefDir "oneBibToRuleThemAll.org"))
  (with-eval-after-load 'ox
    (defun my/org-ref-process-buffer--html (backend)
      "Preprocess `org-ref' citations to HTML format.

Do this only if the export backend is `html' or a derivative of
that."
      ;; `ox-hugo' is derived indirectly from `ox-html'.
      (when (org-export-derived-backend-p backend 'html)
        (org-ref-process-buffer 'html)))
    (add-to-list 'org-export-before-parsing-hook #'my/org-ref-process-buffer--html))
  (setq org-latex-pdf-process (list "latexmk -f -pdf -%latex -interaction=nonstopmode -bibtex -shell-escape -output-directory=%o %f"))
  )
(map! :leader
      :desc "insert a helm reference"
      "i c" 'org-ref-insert-link)
#+END_SRC

I would like company do to things in org-mode yes please thankyou
#+begin_src elisp :tangle yes
(setq max-lisp-eval-depth 10000)
(setq org-extend-today-until 2)
(after! org
  :config
  (setq org-startup-with-latex-preview t)
  (setq org-startup-with-inline-images t)
  ;;(setq org)
  )
#+END_SRC

(defun native-comp-available-p () nil)

whenever you're over a latex fragment, it will compile. Also, get the resolution correct
#+begin_src elisp :tangle yes
(use-package! org-fragtog
  :config
  (add-hook 'org-mode-hook 'org-fragtog-mode)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
  )
#+end_src
** Org code
#+begin_src elisp :tangle yes
(after! org
  (setq org-table-convert-region-max-lines 999))
#+end_src
** Org-anizing my life
:PROPERTIES:
:ID:       9a235fa1-8b85-440f-b6c5-e999efccabd5
:END:
Current references for putting this together are [[http://doc.norang.ca/org-mode.html][norang]] and [[http://www.cachestocaches.com/2016/9/my-workflow-org-agenda/][Caches to Caches]].
Enable my todos from these files to be collected by the agenda
#+begin_src elisp :tangle yes
(after! org
  (setq org-agenda-files (quote ("~/orgNotes" "~/.doom.d")))
  (setq org-directory "~/orgNotes")
  (setq +org-capture-journal-file "~/orgNotes/journal.org")
  (setq org-priority-faces  '((?A :foreground "#FF6C6B")
                              (?B :foreground "#F97066")
                              (?C :foreground "#F37460")
                              (?D :foreground "#ED785A")
                              (?E :foreground "#E77D54")
                              (?F :foreground "#E1804F")
                              (?G :foreground "#DB8449")
                              (?H :foreground "#D8835B")
                              (?I :foreground "#D48172")
                              (?J :foreground "#D17F8A")
                              (?K :foreground "#CE7DA2")
                              (?L :foreground "#CA7BBA")
                              (?M :foreground "#C779D2")
                              (?N :foreground "#C47BDE")
                              (?O :foreground "#BF82DE")
                              (?P :foreground "#BB88DE")
                              (?Q :foreground "#B68FDF")
                              (?R :foreground "#B196DF")
                              (?S :foreground "#AD9CE1")
                              (?T :foreground "#A69EDD")
                              (?U :foreground "#9A94C9")
                              (?V :foreground "#8D8BB6")
                              (?W :foreground "#8181A3")
                              (?X :foreground "#74768F")
                              (?Y :foreground "#676C7B")
                              (?Z :foreground "#5B6268")))
  )
#+end_src
Doom has a thing where it's possible to file captures =SPC-X= to project specific files all centralized in the [[~/org]] folder. Then the display name can be customized with
:Properties:
:CATEGORY: Emacs
:END:

The list of keywords could use more processing; timestamp's in wait would be useful, though this doesn't seem to be working. should check back after restarting.
#+begin_src elisp :tangle yes
(setq org-todo-keywords (quote ((sequence "TODO(t@/!)" "PROJ(p)" "STRT(s!/!)" "WAIT(w@/!)" "HOLD(h)" "|" "DONE(d)" "KILL(k)")
                                (sequence "[ ](T@/!)" "[-](S)" "[?](W)" "|" "[X](D)"))))

(setq org-todo-keywords-for-agenda (quote ((sequence "TODO(t@/!)" "PROJ(p)" "STRT(s!/!)" "WAIT(w@/!)" "HOLD(h)" "|" "DONE(d)" "KILL(k)")
                                           (sequence "[ ](T@/!)" "[-](S)" "[?](W)" "|" "[X](D)"))))
#+end_src

#+begin_src elisp :tangle yes
(setq org-agenda-todo-ignore-deadlines 'future)
(setq org-deadline-warning-days 0)
(setq org-agenda-todo-ignore-scheduled 'future)
#+end_src


A review agenda mode (currently non-functional, as it isn't capturing any DONE tasks)
#+begin_src elisp :tangle no
(after! org
  (add-to-list 'org-agenda-custom-commands
               '("W" "Weekly review"
                 agenda ""
                 ((org-agenda-start-day "-7d")
                  (org-agenda-span 14)
                  (org-agenda-start-on-weekday 1)
                  (org-agenda-start-with-log-mode '(closed))
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp "^\\*\\* DONE "))))))
#+end_src


org priorities
#+begin_src elisp :tangle yes
(after! org
  :config
  (setq org-priority-highest ?A)
  (setq org-priority-lowest ?Z)
  (setq org-priority-default ?Z))
#+end_src

how to sort the agenda and the daily todo. the priority is the most important sorting
#+begin_src elisp :tangle yes
(after! org
  :config
  (setq org-agenda-sorting-strategy
        '((agenda habit-up deadline-up priority-down time-up scheduled-down)
          (todo priority-down)
          (tags priority-down category-keep)
          (search category-keep)))
  )
#+end_src

I don't want future iterations of repeating events to show up. That's just clutter
#+begin_src elisp :tangle yes
(after! org
  :config
  (setq org-agenda-show-future-repeats 'next))
#+end_src

The keybindings for the agenda changed. some have added an annoying amount of friction.
#+begin_src elisp :tangle yes
(after! org
  (org-defkey org-agenda-mode-map "j" #'org-agenda-next-line)
  (org-defkey org-agenda-mode-map "k" #'org-agenda-previous-line)
  (org-defkey org-agenda-mode-map "J" #'org-agenda-priority-up)
  (org-defkey org-agenda-mode-map "K" #'org-agenda-priority-down)
  (org-defkey org-agenda-mode-map (kbd "SPC") 'nil)
  )
#+end_src

For repeating events, the logs get in the way of the notes I was taking. This puts them in a separate drawer.
#+begin_src elisp :tangle yes
(after! org
  (setq org-log-into-drawer t)
  (setq org-log-state-notes-into-drawer t))
#+end_src

Saving whenever org-deadline or org-todo is called
#+begin_src elisp :tangle no
(after! org
  (advice-add 'org-deadline :after 'org-save-all-org-buffers)
  (advice-add 'org-todo :after 'org-save-all-org-buffers)
  (advice-add 'org-schedule :after 'org-save-all-org-buffers)
  (advice-add 'org-store-log-note :after 'org-save-all-org-buffers))
#+end_src
currently not tangled because it doesn't actually allow the date to change. And actually, having =auto-save-visited= on actually achieves the desired effect, and can be set for everything in the particular directory via a [[file:~/orgNotes/.dir-locals.el][.dir-locals.el]] file (which admittedly have a bit of a [[https://superuser.com/questions/740720/reload-minor-mode-in-dir-locals-el/794979#794979][weird syntax]]).

** TODO Org agenda for projectile project

turns out, making an agenda specifically for the project is unnecessary, because the agenda menu already has this under ~SPC a n < n~
#+begin_src elisp :tangle no
(after! org
  (defun ndkk/agenda-for-project ()
    (interactive)
    (let* ((project-name (projectile-project-name))
           (project-root (projectile-project-root))
           (org-agenda-files (list buffer-file-name))
           (org-agenda-custom-commands `(("o" project-name tags-todo
                                          ((agenda "")
                                           (alltodo ""))))))
      (org-agenda-list "o")))
  (map! :leader
        (:prefix ("n" . "+notes")
         :desc "project todos" "p" #'ndk/agenda-for-project
         )
        ))
#+end_src

what I do need is a way to file all work things under a central project file, but with labels for each project. This involves modifying =org-capture-templates=. Unfortunately, the project todo file is
#+begin_src elisp :tangle no
("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
#+end_src
So I'd have to redefine =+org-capture-central-project-todo-file= and =+org--capture-central-file=. Though these functions are less bad than I was thinking.

Or possibly putting =+org-capture-projects-file= in a dir-locals.el. I think that's probably easier? Though it does result in any personal things that get filed while in work projects not filed under personal. Easy enough to avoid, I guess.

** Org-forge
This is my adaptation of orgit/orgit-forge to get org issues into org-mode.
The frequently called function is `org-forge-update-repos`, which periodically fetches (every hour by default) from the known repositories, and adds them to a separate org todo list (located at [[file:~/orgNotes/forge.org]]).
Make a variable forge-org-list that points at the file for forge notes, and add a couple of template for filing, "fi" for issues and "fp" for pull-requests. with appropriate substitions its something like
\* state [#A] Issue #number: Whatever the title is

Author:
Created:
orgit-topic

The pull requests don't get a link ([[https://github.com/magit/orgit-forge][see orgit-forge]] for why).
#+begin_src elisp :tangle yes
(after! org
  (setq forge-org-list (file-name-concat org-directory "forge.org"))

  (defun forge-add-column (which-table)
    "add a column indicating whether it has been added to `\\[forge-org-list]'"
    (condition-case nil
        (forge-sql [:alter-table $s1 :add :column is-in-org] which-table)
      (emacsql-error t)))

  (defun forge-capture-find-headline ()
    "In large part adapted from org-capture-set-target-location, which can't handle substituting a function for a string for the headline"
    (set-buffer (org-capture-target-buffer forge-org-list))
    ;; Org expects the target file to be in Org mode, otherwise
    ;; it throws an error.  However, the default notes files
    ;; should work out of the box.  In this case, we switch it to
    ;; Org mode.
    (unless (derived-mode-p 'org-mode)
      (org-display-warning
       (format "Capture requirement: switching buffer %S to Org mode"
	       (current-buffer)))
      (org-mode))
    (org-capture-put-target-region-and-position)
    (widen)
    (goto-char (point-min))
    (let ((headline (nth 0 forge-global-tmp)))
      (if (re-search-forward (format org-complex-heading-regexp-format
			             (regexp-quote headline))
			     nil t)
          (beginning-of-line)
        (goto-char (point-max))
        (unless (bolp) (insert "\n"))
        (insert "* " headline "\n")
        (insert ":PROPERTIES:\n:CATEGORY: " headline "\n:END:")
        (beginning-of-line 0)))
    )
  ;; add a template for issues and pull requests
  (nconc org-capture-templates '(("f" "Forge")
                                 ("fi" "Forge issue" entry (function  forge-capture-find-headline) "* %(nth 6 forge-global-tmp) [#A] Issue #%(number-to-string (nth 2 forge-global-tmp)): %(nth 3 forge-global-tmp)\n\nAuthor: %(nth 4 forge-global-tmp)\nCreated: %(nth 5 forge-global-tmp) \n[[orgit-topic:%(nth 7 forge-global-tmp)]]\n" :heading (nth 1 forge-global-tmp) :immediate-finish t)
                                 ("fp" "Forge pull request" entry (function  forge-capture-find-headline) "\n* %(nth 6 forge-global-tmp) [#A] Pull-Req #%(number-to-string (nth 2 forge-global-tmp)): %(nth 3 forge-global-tmp)\n\nAuthor: %(nth 4 forge-global-tmp)\nCreated: %(nth 5 forge-global-tmp)\n" :heading (nth 1 forge-global-tmp) :immediate-finish t :prepend nil)))
  (defun org-add-forge (org-template-type forge-item-type repo-name repo-owner repo-id number title author created state id)
    "add a particular issue to the org-forge file."
    (let ((todo-state (if (equal state 'open) "TODO" "DONE"))
          (created-date (concat "<" (substring created 0 10) ">")))
      (setq forge-global-tmp (list repo-name repo-owner number title author created-date todo-state id repo-id))
      (if (org-capture 4 org-template-type) ; add to the list
          (emacsql (forge-db) [:update $s3 :set is-in-org := 't :where (= id $s2)]
                   (forge--tablist-columns-vector) id forge-item-type)
        (signal 'error "org capture failed for some reason"))
      ))
  (defun org-forge-issues (repo)
    "make a list of org-forge issues that haven't been added yet"
    (let* ((forge (nth 0 repo))
           (repo-id (nth 1 repo))
           (repo-name (nth 2 repo))
           (repo-owner (nth 3 repo))
           (issues (forge-sql [:select [number title author created state id] :from issue :where (and (= repository $s2) (is is-in-org nil))] (forge--tablist-columns-vector) repo-id))
           (pullreqs (forge-sql [:select [number title author created state id] :from pullreq :where (and (= repository $s2) (is is-in-org nil))] (forge--tablist-columns-vector) repo-id))
           )
      (mapcar (lambda (issue) (apply 'org-add-forge "fi" 'issue repo-name repo-owner repo-id issue)) issues) ; apply org-add to each issue
      (mapcar (lambda (pullreq) (apply 'org-add-forge "fp" 'pullreq repo-name repo-owner repo-id pullreq)) pullreqs) ; apply org-add to each pull request
      ))
  (defun org-forge-update-repos ()
    (mapcar #'org-forge-issues (forge-sql [:select [forge id name owner] :from repository :order-by [(asc owner) (asc name)]] (forge--tablist-columns-vector)))
    )
  (defun update-forge-org-timer (&optional interval)
    (let ((interval (or interval "1 hour")))
      (condition-case nil
          (cancel-timer forge-org-timer)
        (void-variable "void variable"))
      (setq forge-org-timer (run-at-time interval nil #'org-forge-update-repos))))
  (update-forge-org-timer "1 hour")

  (after! (:and ob-async org-src)
    (dolist (lang '(python r julia)) ;; FIXME: Replace your prefer language for jupyter.
      (cl-pushnew (cons (format "jupyter-%s" lang) lang)
                  org-src-lang-modes :key #'car)))
  )
#+end_src

This is also causing the following issue:
#+begin_src elisp :tangle no
Debugger entered--Lisp error: (emacsql-error "table pullreq has 39 columns but 38 values were supplied")
signal(emacsql-error ("table pullreq has 39 columns but 38 values were supplied"))
#f(compiled-function (_ code message) "Get condition for MESSAGE provided from SQLite." #<bytecode 0x14ee241>)(#<forge-database forge-database-4549040> 1 "table pullreq has 39 columns but 38 values were su...")
apply(#f(compiled-function (_ code message) "Get condition for MESSAGE provided from SQLite." #<bytecode 0x14ee241>) #<forge-database forge-database-4549040> (1 "table pullreq has 39 columns but 38 values were su..."))
emacsql-handle(#<forge-database forge-database-4549040> 1 "table pullreq has 39 columns but 38 values were su...")
#f(compiled-function (connection) "Parse well-formed output into an s-expression." #<bytecode 0xeb44c1>)(#<forge-database forge-database-4549040>)
apply(#f(compiled-function (connection) "Parse well-formed output into an s-expression." #<bytecode 0xeb44c1>) #<forge-database forge-database-4549040> nil)
emacsql-parse(#<forge-database forge-database-4549040>)
#f(compiled-function (connection sql &rest args) #<bytecode 0xe29329>)(#<forge-database forge-database-4549040> [:insert-into $i1 :values $v2] pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound])
apply(#f(compiled-function (connection sql &rest args) #<bytecode 0xe29329>) (#<forge-database forge-database-4549040> [:insert-into $i1 :values $v2] pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound]))
#f(compiled-function (&rest cnm-args) #<bytecode 0x22379e1>)(#<forge-database forge-database-4549040> [:insert-into $i1 :values $v2] pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound])
apply(#f(compiled-function (&rest cnm-args) #<bytecode 0x22379e1>) #<forge-database forge-database-4549040> [:insert-into $i1 :values $v2] (pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound]))
#f(compiled-function (connection sql &rest args) #<bytecode 0x1c018d5>)(#f(compiled-function (&rest cnm-args) #<bytecode 0x22379e1>) #<forge-database forge-database-4549040> [:insert-into $i1 :values $v2] pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound])
apply(#f(compiled-function (connection sql &rest args) #<bytecode 0x1c018d5>) #f(compiled-function (&rest cnm-args) #<bytecode 0x22379e1>) (#<forge-database forge-database-4549040> [:insert-into $i1 :values $v2] pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound]))
#f(compiled-function (&rest args) #<bytecode 0x1b0a279>)(#<forge-database forge-database-4549040> [:insert-into $i1 :values $v2] pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound])
apply(#f(compiled-function (&rest args) #<bytecode 0x1b0a279>) #<forge-database forge-database-4549040> ([:insert-into $i1 :values $v2] pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound]))
emacsql(#<forge-database forge-database-4549040> [:insert-into $i1 :values $v2] pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound])
#f(compiled-function (db obj &optional replace) #<bytecode 0x43d1f79>)(#<forge-database forge-database-4549040> #<forge-pullreq forge-pullreq-1c3dde8>)
apply(#f(compiled-function (db obj &optional replace) #<bytecode 0x43d1f79>) #<forge-database forge-database-4549040> #<forge-pullreq forge-pullreq-1c3dde8>)
closql-insert(#<forge-database forge-database-4549040> #<forge-pullreq forge-pullreq-1c3dde8>)
#f(compiled-function (repo data bump) #<bytecode 0x2d7f1ad>)(#<forge-github-repository forge-github-repository-2f74d7c> ((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels)) t)
apply(#f(compiled-function (repo data bump) #<bytecode 0x2d7f1ad>) #<forge-github-repository forge-github-repository-2f74d7c> (((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels)) t))
forge--update-pullreq(#<forge-github-repository forge-github-repository-2f74d7c> ((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels)) t)
#f(compiled-function (e) #<bytecode 0x39fbbe1>)(((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels)))
mapc(#f(compiled-function (e) #<bytecode 0x39fbbe1>) (((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels))))
#f(compiled-function (repo data bump) #<bytecode 0x2d7f079>)(#<forge-github-repository forge-github-repository-2f74d7c> (((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels))) t)
apply(#f(compiled-function (repo data bump) #<bytecode 0x2d7f079>) #<forge-github-repository forge-github-repository-2f74d7c> ((((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels))) t))
forge--update-pullreqs(#<forge-github-repository forge-github-repository-2f74d7c> (((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels))) t)
#f(compiled-function (data) #<bytecode 0x1c9af99>)(((name . "mat258A") (id . "MDEwOlJlcG9zaXRvcnk0MzI3ODg1NQ==") (createdAt . "2015-09-28T03:56:13Z") (updatedAt . "2015-09-29T07:39:01Z") (nameWithOwner . "dsweber2/mat258A") (parent) (description . "A place to store my homework solutions for MAT258A...") (homepageUrl) (defaultBranchRef (name . "master")) (isArchived) (isFork) (isLocked) (isMirror) (isPrivate) (hasIssuesEnabled . t) (hasWikiEnabled . t) (licenseInfo) (stargazers (totalCount . 0)) (watchers (totalCount . 2)) (assignableUsers ((id . "MDQ6VXNlcjcwOTU2NDk=") (login . "dsweber2") (name . "David Weber"))) (issues) (labels ((id . "MDU6TGFiZWwyNjYwNTM3OTM=") (name . "bug") (color . "fc2929") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTQ=") (name . "duplicate") (color . "cccccc") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTU=") (name . "enhancement") (color . "84b6eb") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTY=") (name . "help wanted") (color . "159818") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTc=") (name . "invalid") (color . "e6e6e6") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTg=") (name . "question") (color . "cc317c") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTk=") (name . "wontfix") (color . "ffffff") (description))) (milestones) (pullRequests ((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels)))))
#f(compiled-function (data) #<bytecode 0x1c9b0c1>)((data (repository (name . "mat258A") (id . "MDEwOlJlcG9zaXRvcnk0MzI3ODg1NQ==") (createdAt . "2015-09-28T03:56:13Z") (updatedAt . "2015-09-29T07:39:01Z") (nameWithOwner . "dsweber2/mat258A") (parent) (description . "A place to store my homework solutions for MAT258A...") (homepageUrl) (defaultBranchRef (name . "master")) (isArchived) (isFork) (isLocked) (isMirror) (isPrivate) (hasIssuesEnabled . t) (hasWikiEnabled . t) (licenseInfo) (stargazers (totalCount . 0)) (watchers (totalCount . 2)) (assignableUsers ((id . "MDQ6VXNlcjcwOTU2NDk=") (login . "dsweber2") (name . "David Weber"))) (issues) (labels ((id . "MDU6TGFiZWwyNjYwNTM3OTM=") (name . "bug") (color . "fc2929") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTQ=") (name . "duplicate") (color . "cccccc") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTU=") (name . "enhancement") (color . "84b6eb") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTY=") (name . "help wanted") (color . "159818") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTc=") (name . "invalid") (color . "e6e6e6") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTg=") (name . "question") (color . "cc317c") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTk=") (name . "wontfix") (color . "ffffff") (description))) (milestones) (pullRequests ((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner ...) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels))))))
ghub--graphql-walk-response(#s(ghub--graphql-req :url #s(url :type "https" :user nil :password nil :host "api.github.com" :portspec nil :filename "/graphql" :target nil :attributes nil :fullness t :silent nil :use-cookies t :asynchronous t) :forge nil :silent nil :method "POST" :headers #f(compiled-function () #<bytecode 0x1c9b09d>) :handler ghub--graphql-handle-response :unpaginate nil :noerror nil :reader nil :callback #f(compiled-function (data) #<bytecode 0x1c9b0c1>) :errorback nil :value nil :extra nil :query (query (repository [(owner $owner String!) (name $name String!)] name id createdAt updatedAt nameWithOwner (parent nameWithOwner) description homepageUrl (defaultBranchRef name) isArchived isFork isLocked isMirror isPrivate hasIssuesEnabled hasWikiEnabled (licenseInfo name) (stargazers totalCount) (watchers totalCount) (assignableUsers [(:edges t)] id login name) (issues [(:edges t) (:singular issue number) (orderBy (... ...))] number id state (author login) title createdAt updatedAt closedAt locked (milestone id) body (assignees [(:edges t)] id) (comments [(:edges t)] databaseId (author login) createdAt updatedAt body) (labels [(:edges t)] id)) (labels [(:edges t) (:singular label id)] id name color description) (milestones [(:edges t) (:singular milestone id)] id number title createdAt updatedAt dueOn closedAt description) (pullRequests [(:edges t) (:singular pullRequest number) (orderBy (... ...))] number id state (author login) title createdAt updatedAt closedAt mergedAt isDraft locked maintainerCanModify isCrossRepository (milestone id) body (baseRef name (repository nameWithOwner)) baseRefOid (headRef name (repository (owner login) nameWithOwner)) headRefOid (assignees [(:edges t)] id) (reviewRequests [(:edges t)] (requestedReviewer "... on User { id }\n")) (comments [(:edges t)] databaseId (author login) createdAt updatedAt body) (labels [(:edges t)] id)))) :query-str "query ($name: String!,$owner: String!) {\n  reposit..." :variables ((owner . "dsweber2") (name . "mat258A")) :until ((issues-until) (pullRequests-until)) :buffer #<killed buffer> :pages 1) (data (repository (name . "mat258A") (id . "MDEwOlJlcG9zaXRvcnk0MzI3ODg1NQ==") (createdAt . "2015-09-28T03:56:13Z") (updatedAt . "2015-09-29T07:39:01Z") (nameWithOwner . "dsweber2/mat258A") (parent) (description . "A place to store my homework solutions for MAT258A...") (homepageUrl) (defaultBranchRef (name . "master")) (isArchived) (isFork) (isLocked) (isMirror) (isPrivate) (hasIssuesEnabled . t) (hasWikiEnabled . t) (licenseInfo) (stargazers (totalCount . 0)) (watchers (totalCount . 2)) (assignableUsers (pageInfo (endCursor . "Y3Vyc29yOnYyOpKoZHN3ZWJlcjLOAGxFYQ==") (hasNextPage)) (edges ((node (id . "MDQ6VXNlcjcwOTU2NDk=") (login . "dsweber2") (name . "David Weber"))))) (issues (pageInfo (endCursor) (hasNextPage)) (edges)) (labels (pageInfo (endCursor . "Nw") (hasNextPage)) (edges ((node (id . "MDU6TGFiZWwyNjYwNTM3OTM=") (name . "bug") (color . "fc2929") (description))) ((node (id . "MDU6TGFiZWwyNjYwNTM3OTQ=") (name . "duplicate") (color . "cccccc") (description))) ((node (id . "MDU6TGFiZWwyNjYwNTM3OTU=") (name . "enhancement") (color . "84b6eb") (description))) ((node (id . "MDU6TGFiZWwyNjYwNTM3OTY=") (name . "help wanted") (color . "159818") (description))) ((node (id . "MDU6TGFiZWwyNjYwNTM3OTc=") (name . "invalid") (color . "e6e6e6") (description))) ((node (id . "MDU6TGFiZWwyNjYwNTM3OTg=") (name . "question") (color . "cc317c") (description))) ((node (id . "MDU6TGFiZWwyNjYwNTM3OTk=") (name . "wontfix") (color . "ffffff") (description))))) (milestones (pageInfo (endCursor) (hasNextPage)) (edges)) (pullRequests (pageInfo (endCursor . "Y3Vyc29yOnYyOpK5MjAyMC0wMi0wOFQwNzo0ODozNi0wODowMM...") (hasNextPage)) (edges ((node (number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author ...) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef ... ...) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef ... ...) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees ... ...) (reviewRequests ... ...) (comments ... ...) (labels ... ...))))))))
ghub--graphql-handle-response((:peer (:certificates ((:version 3 :serial-number "02:74:87:f4:82:d0:7c:b0:e8:41:cf:0a:29:35:7e:9b" :issuer "C=US,O=DigiCert Inc,CN=DigiCert TLS Hybrid ECC SHA..." :valid-from "2022-03-16" :valid-to "2023-03-16" :subject "C=US,ST=California,L=San Francisco,O=GitHub\\, Inc...." :public-key-algorithm "EC/ECDSA" :certificate-security-level "High" :signature-algorithm "ECDSA-SHA384" :public-key-id "sha1:3c:44:2f:c0:73:92:af:34:6b:90:16:85:b8:7d:bf:..." :certificate-id "sha1:29:70:30:74:ca:3c:48:f5:4a:79:c6:2d:11:57:a2:..." :pem "-----BEGIN CERTIFICATE-----\nMIIFZzCCBO6gAwIBAgIQAn...") (:version 3 :serial-number "07:f2:f3:5c:87:a8:77:af:7a:ef:e9:47:99:35:25:bd" :issuer "C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCer..." :valid-from "2021-04-14" :valid-to "2031-04-13" :subject "C=US,O=DigiCert Inc,CN=DigiCert TLS Hybrid ECC SHA..." :public-key-algorithm "EC/ECDSA" :certificate-security-level "Ultra" :signature-algorithm "RSA-SHA384" :public-key-id "sha1:3f:a4:c2:7e:9c:9c:89:2c:6b:98:6c:1c:3e:1f:40:..." :certificate-id "sha1:ae:c1:3c:dd:5e:a6:a3:99:8a:ec:14:ac:33:1a:d9:..." :pem "-----BEGIN CERTIFICATE-----\nMIIEFzCCAv+gAwIBAgIQB/...")) :certificate (:version 3 :serial-number "02:74:87:f4:82:d0:7c:b0:e8:41:cf:0a:29:35:7e:9b" :issuer "C=US,O=DigiCert Inc,CN=DigiCert TLS Hybrid ECC SHA..." :valid-from "2022-03-16" :valid-to "2023-03-16" :subject "C=US,ST=California,L=San Francisco,O=GitHub\\, Inc...." :public-key-algorithm "EC/ECDSA" :certificate-security-level "High" :signature-algorithm "ECDSA-SHA384" :public-key-id "sha1:3c:44:2f:c0:73:92:af:34:6b:90:16:85:b8:7d:bf:..." :certificate-id "sha1:29:70:30:74:ca:3c:48:f5:4a:79:c6:2d:11:57:a2:..." :pem "-----BEGIN CERTIFICATE-----\nMIIFZzCCBO6gAwIBAgIQAn...") :key-exchange "ECDHE-RSA" :protocol "TLS1.3" :cipher "AES-128-GCM" :mac "AEAD" :encrypt-then-mac nil)) #s(ghub--graphql-req :url #s(url :type "https" :user nil :password nil :host "api.github.com" :portspec nil :filename "/graphql" :target nil :attributes nil :fullness t :silent nil :use-cookies t :asynchronous t) :forge nil :silent nil :method "POST" :headers #f(compiled-function () #<bytecode 0x1c9b09d>) :handler ghub--graphql-handle-response :unpaginate nil :noerror nil :reader nil :callback #f(compiled-function (data) #<bytecode 0x1c9b0c1>) :errorback nil :value nil :extra nil :query (query (repository [(owner $owner String!) (name $name String!)] name id createdAt updatedAt nameWithOwner (parent nameWithOwner) description homepageUrl (defaultBranchRef name) isArchived isFork isLocked isMirror isPrivate hasIssuesEnabled hasWikiEnabled (licenseInfo name) (stargazers totalCount) (watchers totalCount) (assignableUsers [(:edges t)] id login name) (issues [(:edges t) (:singular issue number) (orderBy (... ...))] number id state (author login) title createdAt updatedAt closedAt locked (milestone id) body (assignees [(:edges t)] id) (comments [(:edges t)] databaseId (author login) createdAt updatedAt body) (labels [(:edges t)] id)) (labels [(:edges t) (:singular label id)] id name color description) (milestones [(:edges t) (:singular milestone id)] id number title createdAt updatedAt dueOn closedAt description) (pullRequests [(:edges t) (:singular pullRequest number) (orderBy (... ...))] number id state (author login) title createdAt updatedAt closedAt mergedAt isDraft locked maintainerCanModify isCrossRepository (milestone id) body (baseRef name (repository nameWithOwner)) baseRefOid (headRef name (repository (owner login) nameWithOwner)) headRefOid (assignees [(:edges t)] id) (reviewRequests [(:edges t)] (requestedReviewer "... on User { id }\n")) (comments [(:edges t)] databaseId (author login) createdAt updatedAt body) (labels [(:edges t)] id)))) :query-str "query ($name: String!,$owner: String!) {\n  reposit..." :variables ((owner . "dsweber2") (name . "mat258A")) :until ((issues-until) (pullRequests-until)) :buffer #<killed buffer> :pages 1))
apply(ghub--graphql-handle-response ((:peer (:certificates ((:version 3 :serial-number "02:74:87:f4:82:d0:7c:b0:e8:41:cf:0a:29:35:7e:9b" :issuer "C=US,O=DigiCert Inc,CN=DigiCert TLS Hybrid ECC SHA..." :valid-from "2022-03-16" :valid-to "2023-03-16" :subject "C=US,ST=California,L=San Francisco,O=GitHub\\, Inc...." :public-key-algorithm "EC/ECDSA" :certificate-security-level "High" :signature-algorithm "ECDSA-SHA384" :public-key-id "sha1:3c:44:2f:c0:73:92:af:34:6b:90:16:85:b8:7d:bf:..." :certificate-id "sha1:29:70:30:74:ca:3c:48:f5:4a:79:c6:2d:11:57:a2:..." :pem "-----BEGIN CERTIFICATE-----\nMIIFZzCCBO6gAwIBAgIQAn...") (:version 3 :serial-number "07:f2:f3:5c:87:a8:77:af:7a:ef:e9:47:99:35:25:bd" :issuer "C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCer..." :valid-from "2021-04-14" :valid-to "2031-04-13" :subject "C=US,O=DigiCert Inc,CN=DigiCert TLS Hybrid ECC SHA..." :public-key-algorithm "EC/ECDSA" :certificate-security-level "Ultra" :signature-algorithm "RSA-SHA384" :public-key-id "sha1:3f:a4:c2:7e:9c:9c:89:2c:6b:98:6c:1c:3e:1f:40:..." :certificate-id "sha1:ae:c1:3c:dd:5e:a6:a3:99:8a:ec:14:ac:33:1a:d9:..." :pem "-----BEGIN CERTIFICATE-----\nMIIEFzCCAv+gAwIBAgIQB/...")) :certificate (:version 3 :serial-number "02:74:87:f4:82:d0:7c:b0:e8:41:cf:0a:29:35:7e:9b" :issuer "C=US,O=DigiCert Inc,CN=DigiCert TLS Hybrid ECC SHA..." :valid-from "2022-03-16" :valid-to "2023-03-16" :subject "C=US,ST=California,L=San Francisco,O=GitHub\\, Inc...." :public-key-algorithm "EC/ECDSA" :certificate-security-level "High" :signature-algorithm "ECDSA-SHA384" :public-key-id "sha1:3c:44:2f:c0:73:92:af:34:6b:90:16:85:b8:7d:bf:..." :certificate-id "sha1:29:70:30:74:ca:3c:48:f5:4a:79:c6:2d:11:57:a2:..." :pem "-----BEGIN CERTIFICATE-----\nMIIFZzCCBO6gAwIBAgIQAn...") :key-exchange "ECDHE-RSA" :protocol "TLS1.3" :cipher "AES-128-GCM" :mac "AEAD" :encrypt-then-mac nil)) #s(ghub--graphql-req :url #s(url :type "https" :user nil :password nil :host "api.github.com" :portspec nil :filename "/graphql" :target nil :attributes nil :fullness t :silent nil :use-cookies t :asynchronous t) :forge nil :silent nil :method "POST" :headers #f(compiled-function () #<bytecode 0x1c9b09d>) :handler ghub--graphql-handle-response :unpaginate nil :noerror nil :reader nil :callback #f(compiled-function (data) #<bytecode 0x1c9b0c1>) :errorback nil :value nil :extra nil :query (query (repository [(owner $owner String!) (name $name String!)] name id createdAt updatedAt nameWithOwner (parent nameWithOwner) description homepageUrl (defaultBranchRef name) isArchived isFork isLocked isMirror isPrivate hasIssuesEnabled hasWikiEnabled (licenseInfo name) (stargazers totalCount) (watchers totalCount) (assignableUsers [(:edges t)] id login name) (issues [(:edges t) (:singular issue number) (orderBy ...)] number id state (author login) title createdAt updatedAt closedAt locked (milestone id) body (assignees [...] id) (comments [...] databaseId (author login) createdAt updatedAt body) (labels [...] id)) (labels [(:edges t) (:singular label id)] id name color description) (milestones [(:edges t) (:singular milestone id)] id number title createdAt updatedAt dueOn closedAt description) (pullRequests [(:edges t) (:singular pullRequest number) (orderBy ...)] number id state (author login) title createdAt updatedAt closedAt mergedAt isDraft locked maintainerCanModify isCrossRepository (milestone id) body (baseRef name (repository nameWithOwner)) baseRefOid (headRef name (repository ... nameWithOwner)) headRefOid (assignees [...] id) (reviewRequests [...] (requestedReviewer "... on User { id }\n")) (comments [...] databaseId (author login) createdAt updatedAt body) (labels [...] id)))) :query-str "query ($name: String!,$owner: String!) {\n  reposit..." :variables ((owner . "dsweber2") (name . "mat258A")) :until ((issues-until) (pullRequests-until)) :buffer #<killed buffer> :pages 1)))
url-http-activate-callback()
url-http-chunked-encoding-after-change-function@54989-backport(1340 2592 1252)
apply(url-http-chunked-encoding-after-change-function@54989-backport (1340 2592 1252))
url-http-chunked-encoding-after-change-function(1340 2592 1252)
url-http-generic-filter(#<process api.github.com> "`_(\11\326$\32j\330\356\332N\247i\367\233noj{\203Nw\340x\227\260%\317\300\347\323-\375\251\275;\360\372\3\3331[\214\3733\252\323I\301...")
Debugger entered--Lisp error: (emacsql-error "table pullreq has 39 columns but 38 values were supplied")
signal(emacsql-error ("table pullreq has 39 columns but 38 values were supplied"))
#f(compiled-function (_ code message) "Get condition for MESSAGE provided from SQLite." #<bytecode 0x14ee241>)(#<forge-database forge-database-4549040> 1 "table pullreq has 39 columns but 38 values were su...")
apply(#f(compiled-function (_ code message) "Get condition for MESSAGE provided from SQLite." #<bytecode 0x14ee241>) #<forge-database forge-database-4549040> (1 "table pullreq has 39 columns but 38 values were su..."))
emacsql-handle(#<forge-database forge-database-4549040> 1 "table pullreq has 39 columns but 38 values were su...")
#f(compiled-function (connection) "Parse well-formed output into an s-expression." #<bytecode 0xeb44c1>)(#<forge-database forge-database-4549040>)
apply(#f(compiled-function (connection) "Parse well-formed output into an s-expression." #<bytecode 0xeb44c1>) #<forge-database forge-database-4549040> nil)
emacsql-parse(#<forge-database forge-database-4549040>)
#f(compiled-function (connection sql &rest args) #<bytecode 0xe29329>)(#<forge-database forge-database-4549040> [:insert-into $i1 :values $v2] pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound])
apply(#f(compiled-function (connection sql &rest args) #<bytecode 0xe29329>) (#<forge-database forge-database-4549040> [:insert-into $i1 :values $v2] pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound]))
#f(compiled-function (&rest cnm-args) #<bytecode 0x22379e1>)(#<forge-database forge-database-4549040> [:insert-into $i1 :values $v2] pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound])
apply(#f(compiled-function (&rest cnm-args) #<bytecode 0x22379e1>) #<forge-database forge-database-4549040> [:insert-into $i1 :values $v2] (pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound]))
#f(compiled-function (connection sql &rest args) #<bytecode 0x1c018d5>)(#f(compiled-function (&rest cnm-args) #<bytecode 0x22379e1>) #<forge-database forge-database-4549040> [:insert-into $i1 :values $v2] pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound])
apply(#f(compiled-function (connection sql &rest args) #<bytecode 0x1c018d5>) #f(compiled-function (&rest cnm-args) #<bytecode 0x22379e1>) (#<forge-database forge-database-4549040> [:insert-into $i1 :values $v2] pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound]))
#f(compiled-function (&rest args) #<bytecode 0x1b0a279>)(#<forge-database forge-database-4549040> [:insert-into $i1 :values $v2] pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound])
apply(#f(compiled-function (&rest args) #<bytecode 0x1b0a279>) #<forge-database forge-database-4549040> ([:insert-into $i1 :values $v2] pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound]))
emacsql(#<forge-database forge-database-4549040> [:insert-into $i1 :values $v2] pullreq [pullreq "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1OnB1bG..." "Z2l0aHViLmNvbTowMTA6UmVwb3NpdG9yeTQzMjc4ODU1" 1 eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound eieio-unbound nil eieio-unbound eieio-unbound eieio-unbound])
#f(compiled-function (db obj &optional replace) #<bytecode 0x43d1f79>)(#<forge-database forge-database-4549040> #<forge-pullreq forge-pullreq-1c3dde8>)
apply(#f(compiled-function (db obj &optional replace) #<bytecode 0x43d1f79>) #<forge-database forge-database-4549040> #<forge-pullreq forge-pullreq-1c3dde8>)
closql-insert(#<forge-database forge-database-4549040> #<forge-pullreq forge-pullreq-1c3dde8>)
#f(compiled-function (repo data bump) #<bytecode 0x2d7f1ad>)(#<forge-github-repository forge-github-repository-2f74d7c> ((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels)) t)
apply(#f(compiled-function (repo data bump) #<bytecode 0x2d7f1ad>) #<forge-github-repository forge-github-repository-2f74d7c> (((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels)) t))
forge--update-pullreq(#<forge-github-repository forge-github-repository-2f74d7c> ((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels)) t)
#f(compiled-function (e) #<bytecode 0x39fbbe1>)(((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels)))
mapc(#f(compiled-function (e) #<bytecode 0x39fbbe1>) (((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels))))
#f(compiled-function (repo data bump) #<bytecode 0x2d7f079>)(#<forge-github-repository forge-github-repository-2f74d7c> (((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels))) t)
apply(#f(compiled-function (repo data bump) #<bytecode 0x2d7f079>) #<forge-github-repository forge-github-repository-2f74d7c> ((((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels))) t))
forge--update-pullreqs(#<forge-github-repository forge-github-repository-2f74d7c> (((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels))) t)
#f(compiled-function (data) #<bytecode 0x1c9af99>)(((name . "mat258A") (id . "MDEwOlJlcG9zaXRvcnk0MzI3ODg1NQ==") (createdAt . "2015-09-28T03:56:13Z") (updatedAt . "2015-09-29T07:39:01Z") (nameWithOwner . "dsweber2/mat258A") (parent) (description . "A place to store my homework solutions for MAT258A...") (homepageUrl) (defaultBranchRef (name . "master")) (isArchived) (isFork) (isLocked) (isMirror) (isPrivate) (hasIssuesEnabled . t) (hasWikiEnabled . t) (licenseInfo) (stargazers (totalCount . 0)) (watchers (totalCount . 2)) (assignableUsers ((id . "MDQ6VXNlcjcwOTU2NDk=") (login . "dsweber2") (name . "David Weber"))) (issues) (labels ((id . "MDU6TGFiZWwyNjYwNTM3OTM=") (name . "bug") (color . "fc2929") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTQ=") (name . "duplicate") (color . "cccccc") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTU=") (name . "enhancement") (color . "84b6eb") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTY=") (name . "help wanted") (color . "159818") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTc=") (name . "invalid") (color . "e6e6e6") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTg=") (name . "question") (color . "cc317c") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTk=") (name . "wontfix") (color . "ffffff") (description))) (milestones) (pullRequests ((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner (login . "JuliaTagBot")) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels)))))
#f(compiled-function (data) #<bytecode 0x1c9b0c1>)((data (repository (name . "mat258A") (id . "MDEwOlJlcG9zaXRvcnk0MzI3ODg1NQ==") (createdAt . "2015-09-28T03:56:13Z") (updatedAt . "2015-09-29T07:39:01Z") (nameWithOwner . "dsweber2/mat258A") (parent) (description . "A place to store my homework solutions for MAT258A...") (homepageUrl) (defaultBranchRef (name . "master")) (isArchived) (isFork) (isLocked) (isMirror) (isPrivate) (hasIssuesEnabled . t) (hasWikiEnabled . t) (licenseInfo) (stargazers (totalCount . 0)) (watchers (totalCount . 2)) (assignableUsers ((id . "MDQ6VXNlcjcwOTU2NDk=") (login . "dsweber2") (name . "David Weber"))) (issues) (labels ((id . "MDU6TGFiZWwyNjYwNTM3OTM=") (name . "bug") (color . "fc2929") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTQ=") (name . "duplicate") (color . "cccccc") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTU=") (name . "enhancement") (color . "84b6eb") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTY=") (name . "help wanted") (color . "159818") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTc=") (name . "invalid") (color . "e6e6e6") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTg=") (name . "question") (color . "cc317c") (description)) ((id . "MDU6TGFiZWwyNjYwNTM3OTk=") (name . "wontfix") (color . "ffffff") (description))) (milestones) (pullRequests ((number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author (login . "JuliaTagBot")) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef (name . "master") (repository (nameWithOwner . "dsweber2/mat258A"))) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef (name . "master") (repository (owner ...) (nameWithOwner . "JuliaTagBot/mat258A"))) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees) (reviewRequests) (comments) (labels))))))
ghub--graphql-walk-response(#s(ghub--graphql-req :url #s(url :type "https" :user nil :password nil :host "api.github.com" :portspec nil :filename "/graphql" :target nil :attributes nil :fullness t :silent nil :use-cookies t :asynchronous t) :forge nil :silent nil :method "POST" :headers #f(compiled-function () #<bytecode 0x1c9b09d>) :handler ghub--graphql-handle-response :unpaginate nil :noerror nil :reader nil :callback #f(compiled-function (data) #<bytecode 0x1c9b0c1>) :errorback nil :value nil :extra nil :query (query (repository [(owner $owner String!) (name $name String!)] name id createdAt updatedAt nameWithOwner (parent nameWithOwner) description homepageUrl (defaultBranchRef name) isArchived isFork isLocked isMirror isPrivate hasIssuesEnabled hasWikiEnabled (licenseInfo name) (stargazers totalCount) (watchers totalCount) (assignableUsers [(:edges t)] id login name) (issues [(:edges t) (:singular issue number) (orderBy (... ...))] number id state (author login) title createdAt updatedAt closedAt locked (milestone id) body (assignees [(:edges t)] id) (comments [(:edges t)] databaseId (author login) createdAt updatedAt body) (labels [(:edges t)] id)) (labels [(:edges t) (:singular label id)] id name color description) (milestones [(:edges t) (:singular milestone id)] id number title createdAt updatedAt dueOn closedAt description) (pullRequests [(:edges t) (:singular pullRequest number) (orderBy (... ...))] number id state (author login) title createdAt updatedAt closedAt mergedAt isDraft locked maintainerCanModify isCrossRepository (milestone id) body (baseRef name (repository nameWithOwner)) baseRefOid (headRef name (repository (owner login) nameWithOwner)) headRefOid (assignees [(:edges t)] id) (reviewRequests [(:edges t)] (requestedReviewer "... on User { id }\n")) (comments [(:edges t)] databaseId (author login) createdAt updatedAt body) (labels [(:edges t)] id)))) :query-str "query ($name: String!,$owner: String!) {\n  reposit..." :variables ((owner . "dsweber2") (name . "mat258A")) :until ((issues-until) (pullRequests-until)) :buffer #<killed buffer> :pages 1) (data (repository (name . "mat258A") (id . "MDEwOlJlcG9zaXRvcnk0MzI3ODg1NQ==") (createdAt . "2015-09-28T03:56:13Z") (updatedAt . "2015-09-29T07:39:01Z") (nameWithOwner . "dsweber2/mat258A") (parent) (description . "A place to store my homework solutions for MAT258A...") (homepageUrl) (defaultBranchRef (name . "master")) (isArchived) (isFork) (isLocked) (isMirror) (isPrivate) (hasIssuesEnabled . t) (hasWikiEnabled . t) (licenseInfo) (stargazers (totalCount . 0)) (watchers (totalCount . 2)) (assignableUsers (pageInfo (endCursor . "Y3Vyc29yOnYyOpKoZHN3ZWJlcjLOAGxFYQ==") (hasNextPage)) (edges ((node (id . "MDQ6VXNlcjcwOTU2NDk=") (login . "dsweber2") (name . "David Weber"))))) (issues (pageInfo (endCursor) (hasNextPage)) (edges)) (labels (pageInfo (endCursor . "Nw") (hasNextPage)) (edges ((node (id . "MDU6TGFiZWwyNjYwNTM3OTM=") (name . "bug") (color . "fc2929") (description))) ((node (id . "MDU6TGFiZWwyNjYwNTM3OTQ=") (name . "duplicate") (color . "cccccc") (description))) ((node (id . "MDU6TGFiZWwyNjYwNTM3OTU=") (name . "enhancement") (color . "84b6eb") (description))) ((node (id . "MDU6TGFiZWwyNjYwNTM3OTY=") (name . "help wanted") (color . "159818") (description))) ((node (id . "MDU6TGFiZWwyNjYwNTM3OTc=") (name . "invalid") (color . "e6e6e6") (description))) ((node (id . "MDU6TGFiZWwyNjYwNTM3OTg=") (name . "question") (color . "cc317c") (description))) ((node (id . "MDU6TGFiZWwyNjYwNTM3OTk=") (name . "wontfix") (color . "ffffff") (description))))) (milestones (pageInfo (endCursor) (hasNextPage)) (edges)) (pullRequests (pageInfo (endCursor . "Y3Vyc29yOnYyOpK5MjAyMC0wMi0wOFQwNzo0ODozNi0wODowMM...") (hasNextPage)) (edges ((node (number . 1) (id . "MDExOlB1bGxSZXF1ZXN0MzcyNzI4NDg4") (state . "OPEN") (author ...) (title . "Install TagBot as a GitHub Action") (createdAt . "2020-02-08T15:48:36Z") (updatedAt . "2020-02-08T15:48:36Z") (closedAt) (mergedAt) (isDraft) (locked) (maintainerCanModify . t) (isCrossRepository . t) (milestone) (body . "You're receiving this pull request because the now...") (baseRef ... ...) (baseRefOid . "720428dca6497a63ef4dd83220f74dd8a1a05f5c") (headRef ... ...) (headRefOid . "e545262a96efda51c036dba1153d34306b4da538") (assignees ... ...) (reviewRequests ... ...) (comments ... ...) (labels ... ...))))))))
ghub--graphql-handle-response((:peer (:certificates ((:version 3 :serial-number "02:74:87:f4:82:d0:7c:b0:e8:41:cf:0a:29:35:7e:9b" :issuer "C=US,O=DigiCert Inc,CN=DigiCert TLS Hybrid ECC SHA..." :valid-from "2022-03-16" :valid-to "2023-03-16" :subject "C=US,ST=California,L=San Francisco,O=GitHub\\, Inc...." :public-key-algorithm "EC/ECDSA" :certificate-security-level "High" :signature-algorithm "ECDSA-SHA384" :public-key-id "sha1:3c:44:2f:c0:73:92:af:34:6b:90:16:85:b8:7d:bf:..." :certificate-id "sha1:29:70:30:74:ca:3c:48:f5:4a:79:c6:2d:11:57:a2:..." :pem "-----BEGIN CERTIFICATE-----\nMIIFZzCCBO6gAwIBAgIQAn...") (:version 3 :serial-number "07:f2:f3:5c:87:a8:77:af:7a:ef:e9:47:99:35:25:bd" :issuer "C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCer..." :valid-from "2021-04-14" :valid-to "2031-04-13" :subject "C=US,O=DigiCert Inc,CN=DigiCert TLS Hybrid ECC SHA..." :public-key-algorithm "EC/ECDSA" :certificate-security-level "Ultra" :signature-algorithm "RSA-SHA384" :public-key-id "sha1:3f:a4:c2:7e:9c:9c:89:2c:6b:98:6c:1c:3e:1f:40:..." :certificate-id "sha1:ae:c1:3c:dd:5e:a6:a3:99:8a:ec:14:ac:33:1a:d9:..." :pem "-----BEGIN CERTIFICATE-----\nMIIEFzCCAv+gAwIBAgIQB/...")) :certificate (:version 3 :serial-number "02:74:87:f4:82:d0:7c:b0:e8:41:cf:0a:29:35:7e:9b" :issuer "C=US,O=DigiCert Inc,CN=DigiCert TLS Hybrid ECC SHA..." :valid-from "2022-03-16" :valid-to "2023-03-16" :subject "C=US,ST=California,L=San Francisco,O=GitHub\\, Inc...." :public-key-algorithm "EC/ECDSA" :certificate-security-level "High" :signature-algorithm "ECDSA-SHA384" :public-key-id "sha1:3c:44:2f:c0:73:92:af:34:6b:90:16:85:b8:7d:bf:..." :certificate-id "sha1:29:70:30:74:ca:3c:48:f5:4a:79:c6:2d:11:57:a2:..." :pem "-----BEGIN CERTIFICATE-----\nMIIFZzCCBO6gAwIBAgIQAn...") :key-exchange "ECDHE-RSA" :protocol "TLS1.3" :cipher "AES-128-GCM" :mac "AEAD" :encrypt-then-mac nil)) #s(ghub--graphql-req :url #s(url :type "https" :user nil :password nil :host "api.github.com" :portspec nil :filename "/graphql" :target nil :attributes nil :fullness t :silent nil :use-cookies t :asynchronous t) :forge nil :silent nil :method "POST" :headers #f(compiled-function () #<bytecode 0x1c9b09d>) :handler ghub--graphql-handle-response :unpaginate nil :noerror nil :reader nil :callback #f(compiled-function (data) #<bytecode 0x1c9b0c1>) :errorback nil :value nil :extra nil :query (query (repository [(owner $owner String!) (name $name String!)] name id createdAt updatedAt nameWithOwner (parent nameWithOwner) description homepageUrl (defaultBranchRef name) isArchived isFork isLocked isMirror isPrivate hasIssuesEnabled hasWikiEnabled (licenseInfo name) (stargazers totalCount) (watchers totalCount) (assignableUsers [(:edges t)] id login name) (issues [(:edges t) (:singular issue number) (orderBy (... ...))] number id state (author login) title createdAt updatedAt closedAt locked (milestone id) body (assignees [(:edges t)] id) (comments [(:edges t)] databaseId (author login) createdAt updatedAt body) (labels [(:edges t)] id)) (labels [(:edges t) (:singular label id)] id name color description) (milestones [(:edges t) (:singular milestone id)] id number title createdAt updatedAt dueOn closedAt description) (pullRequests [(:edges t) (:singular pullRequest number) (orderBy (... ...))] number id state (author login) title createdAt updatedAt closedAt mergedAt isDraft locked maintainerCanModify isCrossRepository (milestone id) body (baseRef name (repository nameWithOwner)) baseRefOid (headRef name (repository (owner login) nameWithOwner)) headRefOid (assignees [(:edges t)] id) (reviewRequests [(:edges t)] (requestedReviewer "... on User { id }\n")) (comments [(:edges t)] databaseId (author login) createdAt updatedAt body) (labels [(:edges t)] id)))) :query-str "query ($name: String!,$owner: String!) {\n  reposit..." :variables ((owner . "dsweber2") (name . "mat258A")) :until ((issues-until) (pullRequests-until)) :buffer #<killed buffer> :pages 1))
apply(ghub--graphql-handle-response ((:peer (:certificates ((:version 3 :serial-number "02:74:87:f4:82:d0:7c:b0:e8:41:cf:0a:29:35:7e:9b" :issuer "C=US,O=DigiCert Inc,CN=DigiCert TLS Hybrid ECC SHA..." :valid-from "2022-03-16" :valid-to "2023-03-16" :subject "C=US,ST=California,L=San Francisco,O=GitHub\\, Inc...." :public-key-algorithm "EC/ECDSA" :certificate-security-level "High" :signature-algorithm "ECDSA-SHA384" :public-key-id "sha1:3c:44:2f:c0:73:92:af:34:6b:90:16:85:b8:7d:bf:..." :certificate-id "sha1:29:70:30:74:ca:3c:48:f5:4a:79:c6:2d:11:57:a2:..." :pem "-----BEGIN CERTIFICATE-----\nMIIFZzCCBO6gAwIBAgIQAn...") (:version 3 :serial-number "07:f2:f3:5c:87:a8:77:af:7a:ef:e9:47:99:35:25:bd" :issuer "C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCer..." :valid-from "2021-04-14" :valid-to "2031-04-13" :subject "C=US,O=DigiCert Inc,CN=DigiCert TLS Hybrid ECC SHA..." :public-key-algorithm "EC/ECDSA" :certificate-security-level "Ultra" :signature-algorithm "RSA-SHA384" :public-key-id "sha1:3f:a4:c2:7e:9c:9c:89:2c:6b:98:6c:1c:3e:1f:40:..." :certificate-id "sha1:ae:c1:3c:dd:5e:a6:a3:99:8a:ec:14:ac:33:1a:d9:..." :pem "-----BEGIN CERTIFICATE-----\nMIIEFzCCAv+gAwIBAgIQB/...")) :certificate (:version 3 :serial-number "02:74:87:f4:82:d0:7c:b0:e8:41:cf:0a:29:35:7e:9b" :issuer "C=US,O=DigiCert Inc,CN=DigiCert TLS Hybrid ECC SHA..." :valid-from "2022-03-16" :valid-to "2023-03-16" :subject "C=US,ST=California,L=San Francisco,O=GitHub\\, Inc...." :public-key-algorithm "EC/ECDSA" :certificate-security-level "High" :signature-algorithm "ECDSA-SHA384" :public-key-id "sha1:3c:44:2f:c0:73:92:af:34:6b:90:16:85:b8:7d:bf:..." :certificate-id "sha1:29:70:30:74:ca:3c:48:f5:4a:79:c6:2d:11:57:a2:..." :pem "-----BEGIN CERTIFICATE-----\nMIIFZzCCBO6gAwIBAgIQAn...") :key-exchange "ECDHE-RSA" :protocol "TLS1.3" :cipher "AES-128-GCM" :mac "AEAD" :encrypt-then-mac nil)) #s(ghub--graphql-req :url #s(url :type "https" :user nil :password nil :host "api.github.com" :portspec nil :filename "/graphql" :target nil :attributes nil :fullness t :silent nil :use-cookies t :asynchronous t) :forge nil :silent nil :method "POST" :headers #f(compiled-function () #<bytecode 0x1c9b09d>) :handler ghub--graphql-handle-response :unpaginate nil :noerror nil :reader nil :callback #f(compiled-function (data) #<bytecode 0x1c9b0c1>) :errorback nil :value nil :extra nil :query (query (repository [(owner $owner String!) (name $name String!)] name id createdAt updatedAt nameWithOwner (parent nameWithOwner) description homepageUrl (defaultBranchRef name) isArchived isFork isLocked isMirror isPrivate hasIssuesEnabled hasWikiEnabled (licenseInfo name) (stargazers totalCount) (watchers totalCount) (assignableUsers [(:edges t)] id login name) (issues [(:edges t) (:singular issue number) (orderBy ...)] number id state (author login) title createdAt updatedAt closedAt locked (milestone id) body (assignees [...] id) (comments [...] databaseId (author login) createdAt updatedAt body) (labels [...] id)) (labels [(:edges t) (:singular label id)] id name color description) (milestones [(:edges t) (:singular milestone id)] id number title createdAt updatedAt dueOn closedAt description) (pullRequests [(:edges t) (:singular pullRequest number) (orderBy ...)] number id state (author login) title createdAt updatedAt closedAt mergedAt isDraft locked maintainerCanModify isCrossRepository (milestone id) body (baseRef name (repository nameWithOwner)) baseRefOid (headRef name (repository ... nameWithOwner)) headRefOid (assignees [...] id) (reviewRequests [...] (requestedReviewer "... on User { id }\n")) (comments [...] databaseId (author login) createdAt updatedAt body) (labels [...] id)))) :query-str "query ($name: String!,$owner: String!) {\n  reposit..." :variables ((owner . "dsweber2") (name . "mat258A")) :until ((issues-until) (pullRequests-until)) :buffer #<killed buffer> :pages 1)))
url-http-activate-callback()
url-http-chunked-encoding-after-change-function@54989-backport(1340 2592 1252)
apply(url-http-chunked-encoding-after-change-function@54989-backport (1340 2592 1252))
url-http-chunked-encoding-after-change-function(1340 2592 1252)
url-http-generic-filter(#<process api.github.com> "`_(\11\326$\32j\330\356\332N\247i\367\233noj{\203Nw\340x\227\260%\317\300\347\323-\375\251\275;\360\372\3\3331[\214\3733\252\323I\301...")
#+end_src
when initially adding a repository. Doesn't seem to actually be stopping it from adding to the repository however, so I think we're ok.
* LSP stuff
** R specific
had to add these packages
#+begin_src R :tangle no
install.packages("styler")
install.packages("lintr")
install.packages("languageserver")
#+end_src
https://github.com/r-lib/lintr
also at the command line:
#+begin_src bash :tangle no
# On Debian, Ubuntu, etc.
apt install --assume-yes --no-install-recommends build-essential libcurl4-openssl-dev libssl-dev libxml2-dev r-base

# On Fedora, Centos, etc.
dnf install --assumeyes --setopt=install_weak_deps=False @development-tools libcurl-devel libxml2-devel openssl-devel R

# On Alpine
apk add --no-cache curl-dev g++ gcc libxml2-dev linux-headers make R R-dev
#+end_src
https://github.com/REditorSupport/languageserver

#+begin_src elisp :tangle yes
(after! lsp
  :after ess
  (add-hook 'ess-r-mode-hook #'lsp)
)
#+end_src
** General settings

delphi-epidata has a stupidly large number of files, and shouldn't be watched by default
#+begin_src elisp :tangle yes
(with-eval-after-load 'lsp-mode
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\delphi-epidata\\'")
  ;; or
  ;; (add-to-list 'lsp-file-watch-ignored-files "[/\\\\]\\.my-files\\'")
  (setq lsp-ruff-server-command '("ruff" "server" "--preview"))
  (setq lsp-ruff-ruff-args '("--preview"))
  )
#+end_src

This is the command that gets lsp working again, despite being jank
#+begin_src elisp :tangle no
(setq debug-on-error nil)
#+end_src
** TODO add lsp mode by default to ess
* Python IDE
Following advice from [[https://github.com/wyuenho/emacs-pet?tab=readme-ov-file][here]] and [[https://github.com/doomemacs/doomemacs/issues/1666][here]], I'm activating =direnv= (which is actually using =envrc=) as a way of managing python virtual environments.

Additionally, as a way of managing developer dependencies (still need to figure out a name for that), [[https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#nested-activation][nested activation]] seems like the way to go. This is set globally via =conda config --set auto_stack 1=.
An alternative procedure to "inherit" from another environment is [[https://stackoverflow.com/questions/42352841/how-to-update-an-existing-conda-environment-with-a-yml-file][here]], which updates another env based on a yml. So explicitly =conda env update --name localEnv -f baseEnv.yml=, though apparently this struggles somewhat with removing packages.
#+begin_src elisp :tangle yes
(after! lsp
  :config
  (push "[/\\\\]\\.PlayOnLinux\\'" lsp-file-watch-ignored-directories)
  (setq lsp-pyright-langserver-command "basedpyright")
  (lsp-workspace-remove-all-folders)
  (add-hook 'ess-julia-mode-hook #'lsp)
  (add-to-list 'lsp-enabled-clients #'pylsp)
  (add-to-list 'lsp-enabled-clients #'ruff)
  (add-to-list 'lsp-enabled-clients #'semgrep)
  (add-to-list 'lsp-enabled-clients #'lsp-r)
  )
;; (after! lsp-pyright
;;   :config
;;   (setq lsp-pyright-multi-root nil)
;;   )
#+end_src

Command "pylsp" is present on the path.
Command "pyls" is not present on the path.
Command "semgrep lsp" is present on the path.
Command "ruff-lsp" is present on the path.
Command "/fasterHome/anaconda3/envs/doom/bin/basedpyright-langserver --stdio" is present on the path.
Command "pylsp" is present on the path.
Command "pyls" is not present on the path.


<2024-10-11 Fri> A lot of my woes seem to stem from =pyright= and/or =basedpyright= (haven't tried =pyright= directly). Going back(?) to using [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pylsp/][pylsp]], which in turn depends on Jedi.
<2024-10-20 Sun> So basedpyright is working, along with ruff and semgrep, but the type checking it uses is hyper aggressive, and the completion suggestions are slow. Actually going back See the =add-to-list='s above for how.
#+begin_src elisp :tangle yes
(use-package! pet
  :config
  (add-hook 'python-base-mode-hook 'pet-mode -10)
  )
#+end_src
** Anaconda
#+begin_src emacs-lisp :tangle yes
(after! python
  (conda-env-activate "doom"))
#end_src
*** TODO [#A] function to build dependency file
Conda doesn't seem to have a great way to do this; it's export does a bit much, and I'm not sure it has a way to pull in imports from files. Also, automating inheriting from the development file would also be useful. That's probably actually the first thing to do.
At the moment I'm doing this via a bash alias condaup, but that isn't accessible here for some reason. I should add a command that calls it from inside emacs.
*** TODO [#A] write update conda environment function
** Troubleshooting
basedpyright, and actually most of the others are a bit overeager about adding to the watch-list. it is located at [[file:~/.emacs.d/.local/cache/lsp-session]], and is a very long string. There's actually several functions for clearing this: =lsp-workspace-folders-remove=, lsp-workspace-remove-all-folders. there's also an add (seems redundant), an open (goes to the directory), and a switch
* LaTeX stuff
Used to work, seems to have borked since the re-install unfortunately.
#+begin_src elisp :tangle yes
(setq +latex-viewers '(Okular))
#+end_src
* Code formatting stuff
#+begin_src elisp :tangle no
(after! org
  (add-to-list '+format-on-save-enabled-modes 'sgml-mode t))
#+end_src

hack from [[https://github.com/radian-software/apheleia/discussions/120][here]] to get lsp formatting on saves in buffers where that's a thing
#+begin_src elisp :tangle no
(after! apheleia
  (defun apheleia-lsp-formatter-buffer (buffer scratch)
  (with-current-buffer buffer
    (if (lsp-feature? "textDocument/formatting")
        (let ((edits (lsp-request
                      "textDocument/formatting"
                      (lsp--make-document-formatting-params))))
          (unless (seq-empty-p edits)
            (with-current-buffer scratch
              (lsp--apply-text-edits edits 'format)))))))

(cl-defun apheleia-lsp-formatter
    (&key buffer scratch formatter callback &allow-other-keys)
  (apheleia-lsp-formatter-buffer buffer scratch)
  (funcall callback))
(add-to-list 'apheleia-formatters '(apheleia-lsp . apheleia-lsp-formatter))
(setf (alist-get 'elixir-mode apheleia-mode-alist)
      '(apheleia-lsp))
(setf (alist-get 'python-mode apheleia-mode-alist)
      '(apheleia-lsp)))
#+end_src

#+begin_src emacs-lisp :tangle yes
(after! setq '(emacs-lisp-mode))
#+end_src
* Ein/emacs-jupyter settings
Note these are two different packages, ein is [[https://github.com/millejoh/emacs-ipython-notebook][here]], while [[https://github.com/nnicandro/emacs-jupyter][this is emacs-jupyter]]. Ein has a nicer 1-1 for notebooks, but emacs-jupyter has better auto-complete options.
general ein settings
#+begin_src elisp :tangle yes
(after! ein
  (setq ein:output-area-inlined-images t))
#+end_src

exporting org to ipython notebooks
#+begin_src elisp :tangle yes
(use-package! ox-ipynb)
#+end_src
#+end_src
* ESS stuff
switching to `rig`:
#+begin_src elisp :tangle yes
(setq inferior-ess-r-program "/usr/local/bin/R")
(setq lsp-clients-r-server-command '("/usr/local/bin/R" "-e" "languageserver::run()"))
#+end_src

#+begin_src elisp :tangle yes
(after! ess
  (add-to-list 'safe-local-variable-values '(comment-add . 0)))
#+end_src
(add-to-list 'safe-local-variable-values '(comment-add . 0))

There are some color problems which are currently being worked on; a workaround [[https://github.com/emacs-ess/ESS/issues/1199][from the issues list]] is
#+begin_src elisp :tangle yes
(after! ess
  (defun my-inferior-ess-init ()
    (setq-local ansi-color-for-comint-mode 'filter)
    (smartparens-mode 1))
  (add-hook 'inferior-ess-mode-hook 'my-inferior-ess-init)
  )
#+end_src

** Debug commands
Wall of things that are currently in a pull request so I can't be arsed to do this correctly
#+begin_src elisp :tangle yes
(after! ess-tracebug
  (defun ess-debug-command-finish ()
    "Step next in debug mode.
Equivalent to `f' at the R prompt."
    (interactive)
    (ess-force-buffer-current)
    (unless (ess--dbg-is-active-p)
      (error "Debugger is not active"))
    (if (ess--dbg-is-recover-p)
        (progn (ess-send-string (ess-get-process) "0")
               (ess-send-string (ess-get-process) "f"))
      (ess-send-string (ess-get-process) "f")))
  (defun ess-debug-command-step ()
    "Step next in debug mode.
Equivalent to `s' at the R prompt."
    (interactive)
    (ess-force-buffer-current)
    (unless (ess--dbg-is-active-p)
      (error "Debugger is not active"))
    (if (ess--dbg-is-recover-p)
        (progn (ess-send-string (ess-get-process) "0")
               (ess-send-string (ess-get-process) "s"))
      (ess-send-string (ess-get-process) "s")))

  (defun ess-debug-command-resume ()
    "Step next in debug mode.
Equivalent to `r' at the R prompt."
    (interactive)
    (ess-force-buffer-current)
    (unless (ess--dbg-is-active-p)
      (error "Debugger is not active"))
    (if (ess--dbg-is-recover-p)
        (progn (ess-send-string (ess-get-process) "0")
               (ess-send-string (ess-get-process) "r"))
      (ess-send-string (ess-get-process) "r")))

  (defun ess-debug-command-where ()
    "Step next in debug mode.
Equivalent to `where' at the R prompt."
    (interactive)
    (ess-force-buffer-current)
    (unless (ess--dbg-is-active-p)
      (error "Debugger is not active"))
    (ess-send-string (ess-get-process) "where"))


  (defun ess-debug-command-help ()
    "Step next in debug mode.
Equivalent to `where' at the R prompt."
    (interactive)
    (ess-force-buffer-current)
    (unless (ess--dbg-is-active-p)
      (error "Debugger is not active"))
    (ess-send-string (ess-get-process) "help"))
  (define-key ess-debug-minor-mode-map (kbd "M-S") #'ess-debug-command-step)
  (define-key ess-debug-minor-mode-map (kbd "M-W") #'ess-debug-command-where)
  (define-key ess-debug-minor-mode-map (kbd "M-F") #'ess-debug-command-finish)
  (define-key ess-debug-minor-mode-map (kbd "M-H") #'ess-debug-command-help)
  (define-key ess-debug-minor-mode-map (kbd "M-R") #'ess-debug-command-resume))
#+end_src

** Commands to add
=styler::style_pkg=, =pkgdown::build_site()=
#+begin_src elisp :tangle yes
(after! ess-r-mode
  (defun ess-r-style-pkg (&optional arg)
  "Interface for `styler::style_pkg()'."
  (interactive "P")
  (ess-r-package-eval-linewise
   "styler::style_pkg(%s)\n" "styling %s" arg
   ))
  (defun ess-r-build-site (&optional arg)
  "Interface for `pkgdown::build_site()'.
With no prefix ARG, build with `lazy = FALSE'."
  (interactive "P")
  (ess-r-package-eval-linewise
   "pkgdown::build_site(%s, lazy=TRUE)\n" "building site for %s" arg
   ))
  (keymap-set ess-r-package-dev-map "f" #'ess-r-style-pkg)
  (keymap-set ess-r-package-dev-map "S" #'ess-r-build-site)
  )
#+end_src

** Quarto mode
#+begin_src elisp :tangle yes
(use-package! quarto-mode
  )
#+end_src
* Julia Settings
First, let's define the current version of Julia
#+begin_src elisp :tangle yes
(after! julia-repl
  (setq juliaVersion "1.11.0")
  (setq juliaPkgVersion "1.11")
  (setenv "JULIA_NUM_THREADS" "5"))
#+END_SRC


I've mostly borrowed this from https://www.gtrun.org/post/config/#julia.
Apparently non-Jedi has been making an emacs interface for the lsp [[https://github.com/non-Jedi/lsp-julia.git][here.]] Also,
this julia code doesn't actually need to be tangled, but should be run
beforehand.
#+BEGIN_SRC julia :tangle no
using Pkg; Pkg.add("PackageCompiler")
juliaVersion = "1.11.0"
using Pkg, PackageCompiler
Pkg.activate("~/.julia/environments/newBase")
Pkg.add("LanguageServer")
create_sysimage(:LanguageServer,
                sysimage_path = "/home/dsweber/julia-$(juliaVersion)/lib/LspSysImage.so")
#+END_SRC

#+RESULTS:

and now the actual code to be tangled into ~init.el~.
#+begin_src elisp :tangle yes
(use-package! lsp-julia
  :after julia-repl eshell lsp
  :config
  (setq juliaVersion "1.11.0")
  (setq juliaPkgVersion "1.11")
  (setenv "PATH"
          (concat
           "/home/dsweber/.julia/juliaup/bin" ":"
           (getenv "PATH")))
  (add-hook 'julia-mode-hook 'lsp)
  (add-hook 'ess-julia-mode-hook #'lsp)
  (setq lsp-julia-default-environment (concat "~/.julia/environments/v" juliaPkgVersion))
  (setq lsp-julia-package-dir (concat "~/.julia/environments/v" juliaPkgVersion))
  (setq lsp-julia-command "/home/dsweber/.julia/juliaup/bin/julia")
  (setq lsp-julia-flags '("--project=/home/dsweber/.julia/environments/v1.11" "--startup-file=no" "--history-file=no"))
  (setq lsp-julia-command "/home/dsweber/.julia/juliaup/bin/julia")
  (setq lsp-julia-timeout 12000)
  (setq lsp-enable-folding t)
  (setq julia-indent-offset 4)

  (setq lsp-julia-format-indents true)
  (setq lsp-enable-indentation true)
  (setq julia-indent-mapping '((julia-mode . julia-indent-offset)))
  (setq lsp--formatting-indent-alist '((c-mode                     . c-basic-offset)                   ; C
                                       (c++-mode                   . c-basic-offset)                   ; C++
                                       (csharp-mode                . c-basic-offset)                   ; C#
                                       (csharp-tree-sitter-mode    . csharp-tree-sitter-indent-offset) ; C#
                                       (d-mode                     . c-basic-offset)                   ; D
                                       (java-mode                  . c-basic-offset)                   ; Java
                                       (jde-mode                   . c-basic-offset)                   ; Java (JDE)
                                       (js-mode                    . js-indent-level)                  ; JavaScript
                                       (js2-mode                   . js2-basic-offset)                 ; JavaScript-IDE
                                       (js3-mode                   . js3-indent-level)                 ; JavaScript-IDE
                                       (json-mode                  . js-indent-level)                  ; JSON
                                       (lua-mode                   . lua-indent-level)                 ; Lua
                                       (objc-mode                  . c-basic-offset)                   ; Objective C
                                       (php-mode                   . c-basic-offset)                   ; PHP
                                       (perl-mode                  . perl-indent-level)                ; Perl
                                       (cperl-mode                 . cperl-indent-level)               ; Perl
                                       (raku-mode                  . raku-indent-offset)               ; Perl6/Raku
                                       (erlang-mode                . erlang-indent-level)              ; Erlang
                                       (ada-mode                   . ada-indent)                       ; Ada
                                       (sgml-mode                  . sgml-basic-offset)                ; SGML
                                       (nxml-mode                  . nxml-child-indent)                ; XML
                                       (pascal-mode                . pascal-indent-level)              ; Pascal
                                       (typescript-mode            . typescript-indent-level)          ; Typescript
                                       (sh-mode                    . sh-basic-offset)                  ; Shell Script
                                       (ruby-mode                  . ruby-indent-level)                ; Ruby
                                       (enh-ruby-mode              . enh-ruby-indent-level)            ; Ruby
                                       (crystal-mode               . crystal-indent-level)             ; Crystal (Ruby)
                                       (css-mode                   . css-indent-offset)                ; CSS
                                       (rust-mode                  . rust-indent-offset)               ; Rust
                                       (rustic-mode                . rustic-indent-offset)             ; Rust
                                       (scala-mode                 . scala-indent:step)                ; Scala
                                       (powershell-mode            . powershell-indent)                ; PowerShell
                                       (ess-mode                   . ess-indent-offset)                ; ESS (R)
                                       (yaml-mode                  . yaml-indent-offset)               ; YAML
                                       (hack-mode                  . hack-indent-offset)               ; Hack
                                       (julia-mode                 . julia-indent-offset)
                                       (default                    . standard-indent)))
  )
#+END_SRC
fixing some stuff for lsp
#+begin_src elisp :tangle yes
(after! lsp-julia
  (setq juliaPkgVersion "1.11")
  (setq juliaVersion "1.11.0")
  (setq lsp-julia-default-environment (concat "~/.julia/environments/v" juliaPkgVersion))
  (setq lsp-julia-package-dir (concat "~/.julia/environments/v" juliaPkgVersion))
  (setq lsp-julia-command "/home/dsweber/.julia/juliaup/bin/julia")
  (setq lsp-julia-flags '("--project=/home/dsweber/.julia/environments/v1.11" "--startup-file=no" "--history-file=no"))
  (setq lsp-julia-command "/home/dsweber/.julia/juliaup/bin/julia")
  (setq lsp-julia-format-kw nil))
#+end_src

It appears that julia-repl also has some settings to adjust
#+begin_src elisp :tangle yes
(after! julia-repl
  (setq julia-repl-executable-records
        `((default ,"/home/dsweber/.julia/juliaup/bin/julia" :basedir
           nil)
          )
        )
  :hook '(julia-repl-mode-hook +word-wrap-mode)
  )
#+end_src
you know what else would be nice? org-babel
#+begin_src elisp :tangle yes
(after! ob-julia
  (setq org-babel-julia-command "/home/dsweber/.julia/juliaup/bin/julia")
  (setq inferior-julia-program-name "/home/dsweber/.julia/juliaup/bin/julia"))
#+end_src
and trying ess julia instead
#+begin_src elisp :tangle yes
(after! ob-ess-julia
  (org-babel-do-load-languages 'org-babel-load-languages (append org-babel-load-languages '((ess-julia . t))))
  (setq org-src-lang-modes (append org-src-lang-modes '(("ess-julia" . ess-julia))))
  )
#+end_src
actually jupyter is the most reasonable
#+begin_src elisp :tangle yes
(after! ein
  (setq org-babel-header-args '((:kernel . "julia-1.11") (:async . no)))
  (setq org-babel-default-header-args:jupyter-julia '((:kernel . "julia-1.11") (:async . no))))
#+end_src

customizing the ob-ein languages
#+begin_src elisp :tangle no
(after! ein
  (setq ob-ein-languages '(("ein" . python)))
  )
#+end_src

* Evil Settings

because I have some odd preferences about how top middle bottom should work
#+begin_src elisp :tangle yes
(after! evil
  (define-key evil-normal-state-map "M" 'evil-scroll-line-to-center)
  (define-key evil-normal-state-map "L" 'evil-scroll-line-to-bottom)
  (define-key evil-normal-state-map "H" 'evil-scroll-line-to-top)
  (define-key evil-normal-state-map "zM" 'evil-window-middle)
  (define-key evil-normal-state-map "zL" 'evil-window-bottom)
  (define-key evil-normal-state-map "zH" 'evil-window-top)
  (define-key evil-normal-state-map "zl" 'evil-scroll-left)
  (define-key evil-normal-state-map "zH" 'evil-scroll-right)
  (define-key evil-normal-state-map "zH" 'evil-window-top)
  (setq evil-cross-lines t) ;; fF etc go beyond the current line
  (setq evil-want-Y-yank-to-eol 'nil)
  )
#+END_SRC

quickscope highlights what letters are unique for the purpose of jumping.
#+begin_src elisp :tangle yes
(use-package! evil-quickscope
  :config
  (global-evil-quickscope-mode 1)
  (add-hook 'org-agenda-mode-hook 'turn-off-evil-quickscope-mode)
  (setq evil-quickscope-cross-lines t)
  )
#+end_src

fringe marks are more legible
#+begin_src elisp :tangle yes
(use-package! evil-fringe-mark
  :config
  (global-evil-fringe-mark-mode))
#+end_src

evil numbers increments and decrements numbers. useful for adding numbers
(repeat the command e.g. 45 times)
#+begin_src elisp :tangle yes
(use-package! evil-numbers
  :config
  (define-key evil-normal-state-map (kbd "zq") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "zQ") 'evil-numbers/dec-at-pt)
  (define-key evil-normal-state-map (kbd "zz") 'evil-numbers/dec-at-pt)
  )
#+end_src

** Evil owl
[[https://github.com/mamapanda/evil-owl][This]] is the thing that allows for previewing registers
#+begin_src elisp :tangle yes
(use-package! evil-owl
  :after evil
  :config
  (setq evil-owl-max-string-length 500)
  (add-to-list 'display-buffer-alist
               '("evil-owl*"
                 (display-buffer-in-side-window)
                 (side . bottom)
                 (window-height . 0.3)))
  (evil-owl-mode))
#+end_src
* Elfeed settings

The actual feed list and general settings are over at elfeedSources
#+begin_src elisp :tangle yes
(setq rmh-elfeed-org-files (list (concat own-doom-home "elfeedSources.org")))
#+end_src

The elfeed goodies collection. See customize for more values
Elfeed Goodies Wide Threshold
#+begin_src elisp :tangle yes
(use-package! elfeed-goodies
  :after elfeed-score
  :config
  (setq elfeed-goodies/entry-pane-position :bottom)
  (setq elfeed-goodies/entry-pane-position :bottom)
  (elfeed-goodies/setup)
  )
#+end_src
Display the date
#+begin_src elisp :tangle yes
(after! elfeed
  (defun elfeed-search-format-date (date)
    (format-time-string "%Y-%m-%d %H:%M" (seconds-to-time date))))
#+end_src

** Elscore settings
#+begin_src elisp :tangle yes
(use-package! elfeed-score
  :config
  (setq elfeed-score/score-file (concat own-doom-home "elfeed.score"))
  (define-key elfeed-search-mode-map (kbd "i") elfeed-score-map)
  (setq elfeed-search-print-entry-function 'elfeed-score-print-entry)
  (elfeed-score-enable t)
  ;; we'll make our own scoring function-- with blackjack and hookers!
  (defcustom elfeed-equalize-random-rate (/ (+ (log 3) (/ (log 11) 2)) 100.0)
    "the coefficient for converting scores to softmax eval. Default maps 100 to a
        correct sorting probability of 99%)"
    :group 'elfeed-equalize)
  (defcustom elfeed-equalize-date-to-score 6048
    "how many seconds correspond to a single score point. Default is 6048 so that
         a week difference gives a score of 100"
    :group 'elfeed-equalize)
  (defcustom elfeed-equalize-random-rate (/ (+ (log 3) (/ (log 11) 2)) 100.0)
    "the coefficient for converting scores to softmax eval. Default maps 100 to a
        correct sorting probability of 99%)"
    :group 'elfeed-equalize)

  (defun softmax (x)
    (let ((term (exp (* 2 x))))
      (/ term (+ term 1)))
    )
  (defun rand ()
    (/ (float (random most-positive-fixnum)) most-positive-fixnum))
  (defun elfeed-score/softmax-sort (a b)
    (let ((flip-prob (softmax (* elfeed-equalize-random-rate (- a b))))
          (rolled-val (rand)))
      (> flip-prob rolled-val)))
  (defun elfeed-score/date-score (sec)
    "convert a number of seconds into a score using rate c"
    (/ sec elfeed-equalize-date-to-score))
  (defun elfeed-score-softmax-swap (a b)
    "Return non-nil if A should sort before B. This is a probabilistic
    comparison that uses the date and the score"

    (let* ((a-score (elfeed-score--get-score-from-entry a))
           (b-score (elfeed-score--get-score-from-entry b))
           (a-date  (elfeed-entry-date a))
           (b-date  (elfeed-entry-date b)))
      (elfeed-score/softmax-sort a-score b-score)
      ))
  (setq elfeed-search-sort-function #'elfeed-score-softmax-swap)
  )
(setq a-date 3425)
(setq b-date 3295)
#+end_src
** +Teeny Tiny Rss+ Newsblur
getting another server to handle fetching data from other servers and phone access.
#+begin_src emacs-lisp :tangle yes
(setq elfeed-log-level 'debug)
;; (toggle-debug-on-error)
(setq elfeed-protocol-log-trace t)
(use-package! elfeed-protocol
  :config
  (setq elfeed-use-curl t)
  (elfeed-set-timeout 36000)
  (setq elfeed-protocol-newsblur-maxpages 20)
  (setq elfeed-curl-extra-arguments '("--cookie-jar" "/home/dsweber/tmp/newsblur-cookie"
                                      "--cookie" "/home/dsweber/tmp/newsblur-cookie"))
  (setq elfeed-protocol-tags elfeed-feeds)
  (setq elfeed-feeds '(( "newsblur+https://HerCarverBidesDew@newsblur.com"
                         :password-file "~/.newsblur"
                         :autotags elfeed-protocol-tags)))
  (defadvice elfeed (after configure-elfeed-feeds activate)
    "Make elfeed-org autotags rules works with elfeed-protocol."
    (setq elfeed-protocol-tags elfeed-feeds)
    (setq elfeed-feeds (list
                        (list "newsblur+https://HerCarverBidesDew@newsblur.com"
                              :password-file "~/.newsblur"
                              :autotags elfeed-protocol-tags))))
  (elfeed-protocol-enable)
  )
#+end_src
** keybindings
(defun actuator-elfeed-show-all ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-all"))
(defun actuator-elfeed-show-unread ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-unread"))

function to toggle warning level
#+begin_src elisp :tangle yes
(defun elfeed-score/toggle-debug-warn-level ()
  (if (eq elfeed-score-log-level 'debug)
      (setq elfeed-score-log-level 'warn)
    (setq elfeed-score-log-level 'debug)))
#+end_src

general keybindings
#+begin_src elisp :tangle yes
(map! :leader
      (:prefix ("e" . "elfeed")
       :desc "elfeed-score-map" "m" #'elfeed-score-map
       :desc "open feed"        "f" #'elfeed
       :desc "update elfeed"    "u" #'elfeed-update
       :desc "score entries"    "s" #'elfeed-score/score
       :desc "add score rules"  "r" #'elfeed-score-load-score-file
       :desc "toggle debug"     "d" #'elfeed-score/toggle-debug-warn-level
       )
      )
#+end_src


combine the elfeed-score-print-entry and elfeed-goodies
* Sunrise/sunset color theme
From [[https://github.com/hadronzoo/theme-changer][here]]
#+begin_src emacs-lisp :tangle yes
(use-package! theme-changer
  :after calendar
  :config
  (setq calendar-location-name "Minneapolis, MN")
  (setq calendar-latitude 44.883057)
  (setq calendar-longitude -93.228889)
  (setq theme-changer-mode 'deftheme)
  (setq theme-changer-delay-seconds -3600)
  (change-theme 'doom-bluloco-light 'doom-henna)
)
#+end_src
- reasonable light themes:
+ `doom-ayu-mirage` a bit washed out
+ `doom-bluloco-light` kinda cotton candy
+ `doom-earl-grey` a bit washed out
+ `doom-feather-light` ok; headings kinda too big though
+ `doom-flatwhite` pretty good
+ `doom-gruvbox-light` pretty good
- reasonable dark themes:
+ `doom-dracula` preferred
+ `doom-feather-dark` ok; headings kinda too big though
+ `doom-henna` good but not current sys colorscheme
+ `doom-acario` good but not current sys colorscheme
** DONE [#A] this isn't running correctly at startup
** TODO [#A] the time adjust isn't working I think
It changed at 18:13
* TODO add Ctrl-enter/ctrl-C ctrl-C behavior for julia
* TODO get ESS to default to the current project, and not whichever terminal was last used
* TODO fix this

Debugger entered--Lisp error: (void-function forge--tablist-columns-vector)
(forge--tablist-columns-vector)
(forge-sql [:select [forge id name owner] :from repository :order-by [(asc owner) (asc name)]] (forge--tablist-columns-vector))
(mapcar #'org-forge-issues (forge-sql [:select [forge id name owner] :from repository :order-by [(asc owner) (asc name)]] (forge--tablist-columns-vector)))
org-forge-update-repos()
apply(org-forge-update-repos nil)
timer-event-handler([t 26082 43130 769837 nil org-forge-update-repos nil nil 848000 nil])
Also, fix whatever is borked when reloading the environment
* TODO ESS spawn new process
Like ~SPC-m-TAB~ but directly spawns a new process in this project.
* TODO switch search default order by most frequently used
or at the very least a hand written version of that
* TODO [#C] ess shortcut to restart R session
* TODO [#B] ess shortcut to exit R session
* TODO Link from file to a remote
There's a package for this, just need to add and configure
* Magit
** TODO Add stash-checkout command
three parts to this:
- first is stashing the current branch with an appropriate name (current branch-n probably)
- then run the standard checkout command
- after running checkout, check to see if there's a stashed commit with the right kind of name
  + if there is, pop the last one (and maybe mention that there were others!)
  + if there isn't, done!
* LLM stuff
#+begin_src elisp :tangle yes
(use-package! gptel
  :config
  ;; OPTIONAL configuration
  ;; OPTIONAL configuration
  (setq
   gptel-model 'fastgpt
   gptel-backend (gptel-make-kagi "Kagi"
                   :key (password-store-get 'api_keys/llms/kagi)))
  ;; (setq
  ;;  gptel-model "claude-3-5-sonnet-20241022" ;  "claude-3-opus-20240229" also available
  ;;  gptel-backend (gptel-make-anthropic "Claude"
  ;;                  :stream t
  ;;                  :key (password-store-get 'api_keys/llms/claude)))
  )
#+end_src
** potential sources
https://blog.jetbrains.com/blog/2024/04/04/full-line-code-completion-in-jetbrains-ides-all-you-need-to-know/#under-the-hood
